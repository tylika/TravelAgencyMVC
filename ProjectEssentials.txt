# TravelAgencyDomain Project
==================================================
// ==== TravelAgencyDomain.csproj ====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.0" />
  </ItemGroup>

</Project>


// ==== Model\Booking.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Booking
{
    public int BookingId { get; set; }

    public int ClientId { get; set; }

    public int TourId { get; set; }

    public int EmployeeId { get; set; }
    [Display(Name = "Дата бронювання")]
    public DateTime BookingDate { get; set; }
    [Display(Name = "Номер телефону")]
    public int NumberOfPeople { get; set; }
    [Display(Name = "Ціна")]
    public decimal TotalPrice { get; set; }
    [Display(Name = "Сатус")]
    public string Status { get; set; } = null!;
    [Display(Name = "Клієнт")]
    public virtual Client Client { get; set; } = null!;
    [Display(Name = "Працівник")]
    public virtual Employee Employee { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual Tour Tour { get; set; } = null!;
}


// ==== Model\Client.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Client
{
    public int ClientId { get; set; }

    [Display(Name = "Ім'я")]
    public string FirstName { get; set; } = null!;
    [Display(Name = "Прізвище")]

    public string LastName { get; set; } = null!;
    [Display(Name = "Номер телефону")]
    public string? PhoneNumber { get; set; }
    [Display(Name = "Електронна пошта")]
    public string? Email { get; set; }
    [Display(Name = "Дата народження")]
    public DateOnly? DateOfBirth { get; set; }

    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();

    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();
}


// ==== Model\Country.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Country
{
    public int CountryId { get; set; }
    [Display(Name = "Країна")]
    public string CountryName { get; set; } = null!;
    [Display(Name = "Чи потрібна віза")]
    public bool VisaRequired { get; set; }
    [Display(Name = "Континент")]
    public string? Continent { get; set; }
    [Display(Name = "Готель")]
    public virtual ICollection<Hotel> Hotels { get; set; } = new List<Hotel>();
    [Display(Name = "Тур")]
    public virtual ICollection<Tour> Tours { get; set; } = new List<Tour>();
}


// ==== Model\Employee.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Employee
{
    public int EmployeeId { get; set; }
    [Display(Name = "Ім'я")]
    public string FirstName { get; set; } = null!;
    [Display(Name = "Прізвище")]
    public string LastName { get; set; } = null!;
    [Display(Name = "Позиція")]
    public string? Position { get; set; }
    [Display(Name = "Дата прийому")]
    public DateOnly? HireDate { get; set; }
    [Display(Name = "Номер телефону")]
    public string? PhoneNumber { get; set; }
    [Display(Name = "Електронна пошта")]
    public string? Email { get; set; }

    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();
}


// ==== Model\Hotel.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Hotel
{
    public int HotelId { get; set; }
    [Display(Name = "Назва Готелю")]
    public string HotelName { get; set; } = null!;

    public int CountryId { get; set; }
    [Display(Name = "Місто")]
    public string? City { get; set; }
    [Display(Name = "Кількість зірок")]
    public int StarRating { get; set; }
    [Display(Name = "Адреса")]
    public string? Address { get; set; }
    [Display(Name = "Опис")]
    public string? Description { get; set; }
    [Display(Name = "Країна")]
    public virtual Country Country { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual ICollection<Tour> Tours { get; set; } = new List<Tour>();
}


// ==== Model\Review.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Review
{
    public int ReviewId { get; set; }

    public int TourId { get; set; }

    public int ClientId { get; set; }
    [Display(Name = "Рейтинг")]
    public int Rating { get; set; }
    [Display(Name = "Відгук")]
    public string? CommentText { get; set; }
    [Display(Name = "Дата опублікування")]
    public DateTime ReviewDate { get; set; }
    [Display(Name = "Клієнт")]
    public virtual Client Client { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual Tour Tour { get; set; } = null!;
}


// ==== Model\Tour.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Tour
{
    public int TourId { get; set; }
    [Display(Name = "Назва туру")]
    public string TourName { get; set; } = null!;

    public int CountryId { get; set; }

    public int HotelId { get; set; }
    [Display(Name = "Дата початку")]
    public DateTime StartDate { get; set; }
    [Display(Name = "Тривалість")]
    public int DurationDays { get; set; }
    [Display(Name = "Ціна за особу")]
    public decimal PricePerPerson { get; set; }
    [Display(Name = "Тип транспорту")]
    public string? TransportType { get; set; }
    [Display(Name = "Опис")]
    public string? Description { get; set; }
    [Display(Name = "Максимально учасників")]
    public int? MaxParticipants { get; set; }
    [Display(Name = "Бронювання")]
    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();
    [Display(Name = "Країна")]
    public virtual Country Country { get; set; } = null!;
    [Display(Name = "Готель")]
    public virtual Hotel Hotel { get; set; } = null!;
    [Display(Name = "Відгуки")]
    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();
}


# TravelAgencyInfrastructure Project
==================================================
// ==== appsettings.json ====
{
    "ConnectionStrings": {
        "DefaultConnection": "Server=DESKTOP-D2I193F\\SQLEXPRESS;Database=TravelAgencyDB;Trusted_Connection=True;MultipleActiveResultSets=true;Encrypt=False;TrustServerCertificate=True"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*"
}

// ==== Program.cs ====
// ����: TravelAgencyInfrastructure/Program.cs
using TravelAgencyInfrastructure; // Namespace, �� ����������� ��� TravelAgencyDbContext
using TravelAgencyDomain.Model;   // Namespace, �� ����������� ���� �����
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews(); // ��� MVC

// ��������� DbContext
builder.Services.AddDbContext<TravelAgencyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")

));


var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment()) // � ����� �������� ����� ������ �������� �������
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}
else
{
    app.UseDeveloperExceptionPage(); // ������ �������� ������� ������� ��� ����������
}

app.UseHttpsRedirection();
app.UseStaticFiles(); // ��� CSS, JS, ��������� � wwwroot

app.UseRouting();

app.UseAuthorization(); // ���� ������ �������� ��������������/�����������

// ������� �� ������������� ��� MVC ����������
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
// app.MapStaticAssets(); // �� ���� ���� ���������� ��� ������ �������, ���� ������������� Blazor ��� ���� ������. ��� ������� MVC �������� �� �������.
// .WithStaticAssets(); // ���������

app.Run();

// ==== TravelAgencyDbContext.cs ====
// Файл: TravelAgencyInfrastructure/TravelAgencyDbContext.cs
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model; // Важливо! Переконайтеся, що моделі з правильного namespace

namespace TravelAgencyInfrastructure // Namespace для DbContext
{
    public partial class TravelAgencyDbContext : DbContext
    {
        public TravelAgencyDbContext() // Цей конструктор може бути потрібен для деяких інструментів
        {
        }

        public TravelAgencyDbContext(DbContextOptions<TravelAgencyDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Tour> Tours { get; set; }

        // МЕТОД OnConfiguring ТУТ НЕ ПОТРІБЕН, якщо ви налаштовуєте підключення в Program.cs
        // Якщо він тут є з жорстко прописаним рядком підключення, видаліть його:
        /*
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
            // if (!optionsBuilder.IsConfigured) // Ця перевірка важлива, якщо метод залишається
            // {
            //    optionsBuilder.UseSqlServer("ВАШ_РЯДОК_ПІДКЛЮЧЕННЯ_ТУТ_ЯКЩО_НЕ_З_PROGRAM_CS");
            // }
        }
        */

        // Метод OnModelCreating залишається таким, яким його згенерував EF Core Database First
        // (з вашого файлу ProjectEssentials.txt)
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasKey(e => e.BookingId).HasName("PK__Bookings__73951ACDA8D9FC82"); // Приклад з вашого файлу

                entity.Property(e => e.BookingId).HasColumnName("BookingID");
                entity.Property(e => e.BookingDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.TourId).HasColumnName("TourID");

                entity.HasOne(d => d.Client).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Clients");

                entity.HasOne(d => d.Employee).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Employees");

                entity.HasOne(d => d.Tour).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.TourId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Tours");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.ClientId).HasName("PK__Clients__E67E1A04A7B26927");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryId).HasName("PK__Countrie__10D160BF15B78EEE");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.Continent).HasMaxLength(50);
                entity.Property(e => e.CountryName).HasMaxLength(100);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmployeeId).HasName("PK__Employee__7AD04FF100F381DB");
                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
                entity.Property(e => e.Position).HasMaxLength(100);
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.HasKey(e => e.HotelId).HasName("PK__Hotels__46023BBF75579549");
                entity.Property(e => e.HotelId).HasColumnName("HotelID");
                entity.Property(e => e.Address).HasMaxLength(200);
                entity.Property(e => e.City).HasMaxLength(100);
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.HotelName).HasMaxLength(100);

                entity.HasOne(d => d.Country).WithMany(p => p.Hotels)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Hotels_Countries");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => e.ReviewId).HasName("PK__Reviews__74BC79AEA655B205");
                entity.Property(e => e.ReviewId).HasColumnName("ReviewID");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.ReviewDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.TourId).HasColumnName("TourID");

                entity.HasOne(d => d.Client).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Clients");

                entity.HasOne(d => d.Tour).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.TourId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Tours");
            });

            modelBuilder.Entity<Tour>(entity =>
            {
                entity.HasKey(e => e.TourId).HasName("PK__Tours__604CEA10923614F1");
                entity.Property(e => e.TourId).HasColumnName("TourID");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.HotelId).HasColumnName("HotelID");
                entity.Property(e => e.PricePerPerson).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.TourName).HasMaxLength(200);
                entity.Property(e => e.TransportType).HasMaxLength(50);

                entity.HasOne(d => d.Country).WithMany(p => p.Tours)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tours_Countries");

                entity.HasOne(d => d.Hotel).WithMany(p => p.Tours)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tours_Hotels");
            });

            OnModelCreatingPartial(modelBuilder); // Залиште цей рядок, якщо він був згенерований
        }

        // Залиште цей рядок, якщо він був згенерований
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}

// ==== Controllers\BookingsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class BookingsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public BookingsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Bookings
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Bookings.Include(b => b.Client).Include(b => b.Employee).Include(b => b.Tour);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Bookings/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings
                .Include(b => b.Client)
                .Include(b => b.Employee)
                .Include(b => b.Tour)
                .FirstOrDefaultAsync(m => m.BookingId == id);
            if (booking == null)
            {
                return NotFound();
            }

            return View(booking);
        }

        // GET: Bookings/Create
        public IActionResult Create()
        {
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName");
            ViewData["EmployeeId"] = new SelectList(_context.Employees, "EmployeeId", "FirstName");
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName");
            return View();
        }

        // POST: Bookings/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("BookingId,ClientId,TourId,EmployeeId,BookingDate,NumberOfPeople,TotalPrice,Status")] Booking booking)
        {
            if (ModelState.IsValid)
            {
                _context.Add(booking);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees, "EmployeeId", "FirstName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            return View(booking);
        }

        // GET: Bookings/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings.FindAsync(id);
            if (booking == null)
            {
                return NotFound();
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees, "EmployeeId", "FirstName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            return View(booking);
        }

        // POST: Bookings/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("BookingId,ClientId,TourId,EmployeeId,BookingDate,NumberOfPeople,TotalPrice,Status")] Booking booking)
        {
            if (id != booking.BookingId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(booking);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!BookingExists(booking.BookingId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees, "EmployeeId", "FirstName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            return View(booking);
        }

        // GET: Bookings/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings
                .Include(b => b.Client)
                .Include(b => b.Employee)
                .Include(b => b.Tour)
                .FirstOrDefaultAsync(m => m.BookingId == id);
            if (booking == null)
            {
                return NotFound();
            }

            return View(booking);
        }

        // POST: Bookings/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var booking = await _context.Bookings.FindAsync(id);
            if (booking != null)
            {
                _context.Bookings.Remove(booking);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool BookingExists(int id)
        {
            return _context.Bookings.Any(e => e.BookingId == id);
        }
    }
}


// ==== Controllers\ClientsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class ClientsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ClientsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Clients
        public async Task<IActionResult> Index()
        {
            return View(await _context.Clients.ToListAsync());
        }

        // GET: Clients/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var client = await _context.Clients
                .FirstOrDefaultAsync(m => m.ClientId == id);
            if (client == null)
            {
                return NotFound();
            }

            return View(client);
        }

        // GET: Clients/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Clients/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ClientId,FirstName,LastName,PhoneNumber,Email,DateOfBirth")] Client client)
        {
            if (ModelState.IsValid)
            {
                _context.Add(client);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(client);
        }

        // GET: Clients/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var client = await _context.Clients.FindAsync(id);
            if (client == null)
            {
                return NotFound();
            }
            return View(client);
        }

        // POST: Clients/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ClientId,FirstName,LastName,PhoneNumber,Email,DateOfBirth")] Client client)
        {
            if (id != client.ClientId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(client);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ClientExists(client.ClientId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(client);
        }

        // GET: Clients/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var client = await _context.Clients
                .FirstOrDefaultAsync(m => m.ClientId == id);
            if (client == null)
            {
                return NotFound();
            }

            return View(client);
        }

        // POST: Clients/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var client = await _context.Clients.FindAsync(id);
            if (client != null)
            {
                _context.Clients.Remove(client);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ClientExists(int id)
        {
            return _context.Clients.Any(e => e.ClientId == id);
        }
    }
}


// ==== Controllers\CountriesController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class CountriesController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public CountriesController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Countries
        public async Task<IActionResult> Index()
        {
            return View(await _context.Countries.ToListAsync());
        }

        // GET: Countries/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var country = await _context.Countries
                .FirstOrDefaultAsync(m => m.CountryId == id);
            if (country == null)
            {
                return NotFound();
            }

            return View(country);
        }

        // GET: Countries/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Countries/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CountryId,CountryName,VisaRequired,Continent")] Country country)
        {
            if (ModelState.IsValid)
            {
                _context.Add(country);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(country);
        }

        // GET: Countries/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var country = await _context.Countries.FindAsync(id);
            if (country == null)
            {
                return NotFound();
            }
            return View(country);
        }

        // POST: Countries/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("CountryId,CountryName,VisaRequired,Continent")] Country country)
        {
            if (id != country.CountryId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(country);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CountryExists(country.CountryId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(country);
        }

        // GET: Countries/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var country = await _context.Countries
                .FirstOrDefaultAsync(m => m.CountryId == id);
            if (country == null)
            {
                return NotFound();
            }

            return View(country);
        }

        // POST: Countries/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var country = await _context.Countries.FindAsync(id);
            if (country != null)
            {
                _context.Countries.Remove(country);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool CountryExists(int id)
        {
            return _context.Countries.Any(e => e.CountryId == id);
        }
    }
}


// ==== Controllers\EmployeesController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class EmployeesController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public EmployeesController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Employees
        public async Task<IActionResult> Index()
        {
            return View(await _context.Employees.ToListAsync());
        }

        // GET: Employees/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var employee = await _context.Employees
                .FirstOrDefaultAsync(m => m.EmployeeId == id);
            if (employee == null)
            {
                return NotFound();
            }

            return View(employee);
        }

        // GET: Employees/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Employees/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("EmployeeId,FirstName,LastName,Position,HireDate,PhoneNumber,Email")] Employee employee)
        {
            if (ModelState.IsValid)
            {
                _context.Add(employee);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(employee);
        }

        // GET: Employees/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var employee = await _context.Employees.FindAsync(id);
            if (employee == null)
            {
                return NotFound();
            }
            return View(employee);
        }

        // POST: Employees/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("EmployeeId,FirstName,LastName,Position,HireDate,PhoneNumber,Email")] Employee employee)
        {
            if (id != employee.EmployeeId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(employee);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!EmployeeExists(employee.EmployeeId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(employee);
        }

        // GET: Employees/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var employee = await _context.Employees
                .FirstOrDefaultAsync(m => m.EmployeeId == id);
            if (employee == null)
            {
                return NotFound();
            }

            return View(employee);
        }

        // POST: Employees/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var employee = await _context.Employees.FindAsync(id);
            if (employee != null)
            {
                _context.Employees.Remove(employee);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool EmployeeExists(int id)
        {
            return _context.Employees.Any(e => e.EmployeeId == id);
        }
    }
}


// ==== Controllers\HomeController.cs ====
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using TravelAgencyInfrastructure.Models;

namespace TravelAgencyInfrastructure.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}


// ==== Controllers\HotelsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class HotelsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public HotelsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Hotels
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Hotels.Include(h => h.Country);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Hotels/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var hotel = await _context.Hotels
                .Include(h => h.Country)
                .FirstOrDefaultAsync(m => m.HotelId == id);
            if (hotel == null)
            {
                return NotFound();
            }

            return View(hotel);
        }

        // GET: Hotels/Create
        public IActionResult Create()
        {
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName");
            return View();
        }

        // POST: Hotels/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("HotelId,HotelName,CountryId,City,StarRating,Address,Description")] Hotel hotel)
        {
            if (ModelState.IsValid)
            {
                _context.Add(hotel);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // GET: Hotels/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var hotel = await _context.Hotels.FindAsync(id);
            if (hotel == null)
            {
                return NotFound();
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // POST: Hotels/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("HotelId,HotelName,CountryId,City,StarRating,Address,Description")] Hotel hotel)
        {
            if (id != hotel.HotelId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(hotel);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!HotelExists(hotel.HotelId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // GET: Hotels/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var hotel = await _context.Hotels
                .Include(h => h.Country)
                .FirstOrDefaultAsync(m => m.HotelId == id);
            if (hotel == null)
            {
                return NotFound();
            }

            return View(hotel);
        }

        // POST: Hotels/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var hotel = await _context.Hotels.FindAsync(id);
            if (hotel != null)
            {
                _context.Hotels.Remove(hotel);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool HotelExists(int id)
        {
            return _context.Hotels.Any(e => e.HotelId == id);
        }
    }
}


// ==== Controllers\ReviewsController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class ReviewsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ReviewsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Reviews
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Reviews.Include(r => r.Client).Include(r => r.Tour);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Reviews/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var review = await _context.Reviews
                .Include(r => r.Client)
                .Include(r => r.Tour)
                .FirstOrDefaultAsync(m => m.ReviewId == id);
            if (review == null)
            {
                return NotFound();
            }

            return View(review);
        }

        // GET: Reviews/Create
        public IActionResult Create()
        {
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName");
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName");
            return View();
        }

        // POST: Reviews/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ReviewId,TourId,ClientId,Rating,CommentText,ReviewDate")] Review review)
        {
            if (ModelState.IsValid)
            {
                _context.Add(review);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // GET: Reviews/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var review = await _context.Reviews.FindAsync(id);
            if (review == null)
            {
                return NotFound();
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // POST: Reviews/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ReviewId,TourId,ClientId,Rating,CommentText,ReviewDate")] Review review)
        {
            if (id != review.ReviewId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(review);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ReviewExists(review.ReviewId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients, "ClientId", "FirstName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // GET: Reviews/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var review = await _context.Reviews
                .Include(r => r.Client)
                .Include(r => r.Tour)
                .FirstOrDefaultAsync(m => m.ReviewId == id);
            if (review == null)
            {
                return NotFound();
            }

            return View(review);
        }

        // POST: Reviews/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var review = await _context.Reviews.FindAsync(id);
            if (review != null)
            {
                _context.Reviews.Remove(review);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ReviewExists(int id)
        {
            return _context.Reviews.Any(e => e.ReviewId == id);
        }
    }
}


// ==== Controllers\ToursController.cs ====
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class ToursController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ToursController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Tours
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Tours.Include(t => t.Country).Include(t => t.Hotel);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Tours/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var tour = await _context.Tours
                .Include(t => t.Country)
                .Include(t => t.Hotel)
                .FirstOrDefaultAsync(m => m.TourId == id);
            if (tour == null)
            {
                return NotFound();
            }

            return View(tour);
        }

        // GET: Tours/Create
        public IActionResult Create()
        {
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName");
            ViewData["HotelId"] = new SelectList(_context.Hotels, "HotelId", "HotelName");
            return View();
        }

        // POST: Tours/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("TourId,TourName,CountryId,HotelId,StartDate,DurationDays,PricePerPerson,TransportType,Description,MaxParticipants")] Tour tour)
        {
            if (ModelState.IsValid)
            {
                _context.Add(tour);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            ViewData["HotelId"] = new SelectList(_context.Hotels, "HotelId", "HotelName", tour.HotelId);
            return View(tour);
        }

        // GET: Tours/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var tour = await _context.Tours.FindAsync(id);
            if (tour == null)
            {
                return NotFound();
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            ViewData["HotelId"] = new SelectList(_context.Hotels, "HotelId", "HotelName", tour.HotelId);
            return View(tour);
        }

        // POST: Tours/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("TourId,TourName,CountryId,HotelId,StartDate,DurationDays,PricePerPerson,TransportType,Description,MaxParticipants")] Tour tour)
        {
            if (id != tour.TourId)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(tour);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!TourExists(tour.TourId))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            ViewData["HotelId"] = new SelectList(_context.Hotels, "HotelId", "HotelName", tour.HotelId);
            return View(tour);
        }

        // GET: Tours/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var tour = await _context.Tours
                .Include(t => t.Country)
                .Include(t => t.Hotel)
                .FirstOrDefaultAsync(m => m.TourId == id);
            if (tour == null)
            {
                return NotFound();
            }

            return View(tour);
        }

        // POST: Tours/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var tour = await _context.Tours.FindAsync(id);
            if (tour != null)
            {
                _context.Tours.Remove(tour);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool TourExists(int id)
        {
            return _context.Tours.Any(e => e.TourId == id);
        }
    }
}


// ==== Models\ErrorViewModel.cs ====
namespace TravelAgencyInfrastructure.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}


// ==== Views\_ViewImports.cshtml ====
@using TravelAgencyInfrastructure
@using TravelAgencyInfrastructure.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


// ==== Views\_ViewStart.cshtml ====
@{
    Layout = "_Layout";
}


// ==== Views\Bookings\Create.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Бронювання</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class ="form-control" asp-items="ViewBag.ClientId"></select>
            </div>
            <div class="form-group">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class ="form-control" asp-items="ViewBag.TourId"></select>
            </div>
            <div class="form-group">
                <label asp-for="EmployeeId" class="control-label"></label>
                <select asp-for="EmployeeId" class ="form-control" asp-items="ViewBag.EmployeeId"></select>
            </div>
            <div class="form-group">
                <label asp-for="NumberOfPeople" class="control-label"></label>
                <input asp-for="NumberOfPeople" class="form-control" />
                <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalPrice" class="control-label"></label>
                <input asp-for="TotalPrice" class="form-control" />
                <span asp-validation-for="TotalPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Bookings\Delete.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Бронювання</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BookingDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BookingDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.NumberOfPeople)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.NumberOfPeople)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalPrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalPrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Employee)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Employee.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="BookingId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Bookings\Details.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Бронювання</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BookingDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BookingDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.NumberOfPeople)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.NumberOfPeople)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalPrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalPrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Employee)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Employee.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.BookingId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Bookings\Edit.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Бронювання</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="BookingId" />
            <div class="form-group">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId"></select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId"></select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EmployeeId" class="control-label"></label>
                <select asp-for="EmployeeId" class="form-control" asp-items="ViewBag.EmployeeId"></select>
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BookingDate" class="control-label"></label>
                <input asp-for="BookingDate" class="form-control" />
                <span asp-validation-for="BookingDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="NumberOfPeople" class="control-label"></label>
                <input asp-for="NumberOfPeople" class="form-control" />
                <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalPrice" class="control-label"></label>
                <input asp-for="TotalPrice" class="form-control" />
                <span asp-validation-for="TotalPrice" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <input asp-for="Status" class="form-control" />
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Bookings\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Booking>

@{
    ViewData["Title"] = "Бронювання";
}

<h1>Бронювання</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.BookingDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NumberOfPeople)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Employee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tour)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.BookingDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.NumberOfPeople)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Client.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Employee.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tour.TourName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.BookingId">Редагувати</a> |
                <a asp-action="Details" asp-route-id="@item.BookingId">Деталі</a> |
                <a asp-action="Delete" asp-route-id="@item.BookingId">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Clients\Create.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Створення клієнта";
}

<h1>Створити</h1>

<h4>Клієнт</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" type="date" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Clients\Delete.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видаити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Клажнт</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateOfBirth)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="ClientId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися назад</a>
    </form>
</div>


// ==== Views\Clients\Details.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Клієнт</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateOfBirth)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.ClientId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Clients\Edit.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Клієнт</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ClientId" />
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Clients\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Client>

@{
    ViewData["Title"] = "Клієнти";
}

<h1>Клієнти</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Створити нового клієнта</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfBirth)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfBirth)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Countries\Create.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Країни</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="CountryName" class="control-label"></label>
                <input asp-for="CountryName" class="form-control" />
                <span asp-validation-for="CountryName" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="VisaRequired" /> @Html.DisplayNameFor(model => model.VisaRequired)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="Continent" class="control-label"></label>
                <input asp-for="Continent" class="form-control" />
                <span asp-validation-for="Continent" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Countries\Delete.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Країни</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CountryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.VisaRequired)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.VisaRequired)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Continent)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Continent)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="CountryId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Countries\Details.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Країни</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CountryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.VisaRequired)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.VisaRequired)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Continent)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Continent)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.CountryId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Countries\Edit.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Країни</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CountryId" />
            <div class="form-group">
                <label asp-for="CountryName" class="control-label"></label>
                <input asp-for="CountryName" class="form-control" />
                <span asp-validation-for="CountryName" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="VisaRequired" /> @Html.DisplayNameFor(model => model.VisaRequired)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="Continent" class="control-label"></label>
                <input asp-for="Continent" class="form-control" />
                <span asp-validation-for="Continent" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Countries\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Country>

@{
    ViewData["Title"] = "Країни";
}

<h1>Країни</h1>

<p>
    <a asp-action="Create">Створити</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CountryName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VisaRequired)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Continent)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CountryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VisaRequired)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Continent)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.CountryId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CountryId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CountryId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Employees\Create.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Працівники</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Position" class="control-label"></label>
                <input asp-for="Position" class="form-control" />
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="HireDate" class="control-label"></label>
                <input asp-for="HireDate" class="form-control" />
                <span asp-validation-for="HireDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Employees\Delete.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Працівники</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HireDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="EmployeeId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Employees\Details.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Працівники</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HireDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.EmployeeId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Employees\Edit.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Працівники</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EmployeeId" />
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Position" class="control-label"></label>
                <input asp-for="Position" class="form-control" />
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="HireDate" class="control-label"></label>
                <input asp-for="HireDate" class="form-control" />
                <span asp-validation-for="HireDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Employees\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Employee>

@{
    ViewData["Title"] = "Працівники";
}

<h1>Працівники</h1>

<p>
    <a asp-action="Create">Створити</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Position)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HireDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Position)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HireDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.EmployeeId">Редагувати</a> |
                <a asp-action="Details" asp-route-id="@item.EmployeeId">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.EmployeeId">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Home\Index.cshtml ====
@{
    ViewData["Title"] = "Головна сторінка";
}

<div class="text-center">
    <h1 class="display-4">Ласкаво просимо!</h1>
    <p>Оберіть розділ у навігаційному меню для роботи з даними.</p>
</div>

// ==== Views\Home\Privacy.cshtml ====
@{
    ViewData["Title"] = "Політика Конфіденційності";
}
<h1>@ViewData["Title"]</h1>

<p>З політикою все норм</p>

// ==== Views\Hotels\Create.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Готелі</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="HotelName" class="control-label"></label>
                <input asp-for="HotelName" class="form-control" />
                <span asp-validation-for="HotelName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class ="form-control" asp-items="ViewBag.CountryId"></select>
            </div>
            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StarRating" class="control-label"></label>
                <input asp-for="StarRating" class="form-control" />
                <span asp-validation-for="StarRating" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Hotels\Delete.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Готелі</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HotelName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HotelName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StarRating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StarRating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Address)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Address)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="HotelId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Hotels\Details.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Готелі</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HotelName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HotelName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StarRating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StarRating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Address)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Address)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.HotelId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Hotels\Edit.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Готелі</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="HotelId" />
            <div class="form-group">
                <label asp-for="HotelName" class="control-label"></label>
                <input asp-for="HotelName" class="form-control" />
                <span asp-validation-for="HotelName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId"></select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StarRating" class="control-label"></label>
                <input asp-for="StarRating" class="form-control" />
                <span asp-validation-for="StarRating" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Hotels\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Hotel>

@{
    ViewData["Title"] = "Готелі";
}

<h1>Готелі</h1>

<p>
    <a asp-action="Create">Створити</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.HotelName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StarRating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.HotelName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StarRating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Country.CountryName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.HotelId">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.HotelId">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.HotelId">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Reviews\Create.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Відгуки</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class ="form-control" asp-items="ViewBag.TourId"></select>
            </div>
            <div class="form-group">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class ="form-control" asp-items="ViewBag.ClientId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Rating" class="control-label"></label>
                <input asp-for="Rating" class="form-control" />
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CommentText" class="control-label"></label>
                <input asp-for="CommentText" class="form-control" />
                <span asp-validation-for="CommentText" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Reviews\Delete.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Відгуки</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Rating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Rating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CommentText)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CommentText)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ReviewDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ReviewDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="ReviewId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Reviews\Details.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Відгуки</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Rating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Rating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CommentText)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CommentText)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ReviewDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ReviewDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.ReviewId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Reviews\Edit.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Відгуки</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ReviewId" />
            <div class="form-group">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId"></select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId"></select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Rating" class="control-label"></label>
                <input asp-for="Rating" class="form-control" />
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CommentText" class="control-label"></label>
                <input asp-for="CommentText" class="form-control" />
                <span asp-validation-for="CommentText" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ReviewDate" class="control-label"></label>
                <input asp-for="ReviewDate" class="form-control" />
                <span asp-validation-for="ReviewDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Reviews\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Review>

@{
    ViewData["Title"] = "Відгуки";
}

<h1>Відгуки</h1>

<p>
    <a asp-action="Create">Створити</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Rating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CommentText)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReviewDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tour)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CommentText)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Client.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tour.TourName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ReviewId">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.ReviewId">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.ReviewId">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== Views\Shared\Error.cshtml ====
@model ErrorViewModel
@{
    ViewData["Title"] = "Помилка";
}

<h1 class="text-danger">Помилка.</h1>
<h2 class="text-danger">Під час обробки вашого запиту сталася помилка.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>ID Запиту:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Режим Розробки</h3>
<p>
    Переключення в середовище <strong>Розробки</strong> відобразить більш детальну інформацію про помилку, що сталася.
</p>
<p>
    <strong>Середовище розробки не повинно бути увімкнене для розгорнутих додатків.</strong>
    Це може призвести до відображення конфіденційної інформації з винятків кінцевим користувачам.
    Для локального налагодження увімкніть середовище <strong>Розробки</strong>, встановивши змінну середовища <strong>ASPNETCORE_ENVIRONMENT</strong> на <strong>Development</strong>
    та перезапустивши додаток.
</p>

// ==== Views\Shared\_Layout.cshtml ====
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Туристичне Агентство</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-custom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Турагентство</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">Головна</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Clients" asp-action="Index">Клієнти</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Countries" asp-action="Index">Країни</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Hotels" asp-action="Index">Готелі</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Tours" asp-action="Index">Тури</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Bookings" asp-action="Index">Бронювання</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Employees" asp-action="Index">Співробітники</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Reviews" asp-action="Index">Відгуки</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">Конфіденційність</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted footer-custom">
        <div class="container">
            &copy; @System.DateTime.Now.Year - Туристичне Агентство MVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Політика Конфіденційності</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

// ==== Views\Shared\_Layout.cshtml.css ====
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}


// ==== Views\Shared\_ValidationScriptsPartial.cshtml ====
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


// ==== Views\Tours\Create.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Створити";
}

<h1>Створити</h1>

<h4>Тури</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="TourName" class="control-label"></label>
                <input asp-for="TourName" class="form-control" />
                <span asp-validation-for="TourName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class ="form-control" asp-items="ViewBag.CountryId"></select>
            </div>
            <div class="form-group">
                <label asp-for="HotelId" class="control-label"></label>
                <select asp-for="HotelId" class ="form-control" asp-items="ViewBag.HotelId"></select>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control" />
                <span asp-validation-for="DurationDays" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PricePerPerson" class="control-label"></label>
                <input asp-for="PricePerPerson" class="form-control" />
                <span asp-validation-for="PricePerPerson" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TransportType" class="control-label"></label>
                <input asp-for="TransportType" class="form-control" />
                <span asp-validation-for="TransportType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="MaxParticipants" class="control-label"></label>
                <input asp-for="MaxParticipants" class="form-control" />
                <span asp-validation-for="MaxParticipants" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tours\Delete.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Тури</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TourName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TourName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StartDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DurationDays)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DurationDays)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PricePerPerson)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PricePerPerson)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TransportType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TransportType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MaxParticipants)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MaxParticipants)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Hotel)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Hotel.HotelName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="TourId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Tours\Details.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Details";
}

<h1>Деталі</h1>

<div>
    <h4>Тури</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TourName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TourName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StartDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DurationDays)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DurationDays)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PricePerPerson)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PricePerPerson)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TransportType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TransportType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MaxParticipants)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MaxParticipants)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Hotel)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Hotel.HotelName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.TourId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Tours\Edit.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Редагувати";
}

<h1>Редагувати</h1>

<h4>Тури</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="TourId" />
            <div class="form-group">
                <label asp-for="TourName" class="control-label"></label>
                <input asp-for="TourName" class="form-control" />
                <span asp-validation-for="TourName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId"></select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="HotelId" class="control-label"></label>
                <select asp-for="HotelId" class="form-control" asp-items="ViewBag.HotelId"></select>
                <span asp-validation-for="HotelId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control" />
                <span asp-validation-for="DurationDays" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PricePerPerson" class="control-label"></label>
                <input asp-for="PricePerPerson" class="form-control" />
                <span asp-validation-for="PricePerPerson" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TransportType" class="control-label"></label>
                <input asp-for="TransportType" class="form-control" />
                <span asp-validation-for="TransportType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="MaxParticipants" class="control-label"></label>
                <input asp-for="MaxParticipants" class="form-control" />
                <span asp-validation-for="MaxParticipants" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Повернутись назад</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


// ==== Views\Tours\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Tour>

@{
    ViewData["Title"] = "Тури";
}

<h1>Тури</h1>

<p>
    <a asp-action="Create">Створити</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TourName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DurationDays)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PricePerPerson)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TransportType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MaxParticipants)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Hotel)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TourName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DurationDays)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PricePerPerson)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TransportType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MaxParticipants)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Country.CountryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Hotel.HotelName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.TourId">Редагувати</a> |
                <a asp-action="Details" asp-route-id="@item.TourId">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.TourId">Видалити</a>
            </td>
        </tr>
}
    </tbody>
</table>


// ==== wwwroot\css\site.css ====
/* �������� ���� */
html {
    font-size: 14px;
}

@media (min-width: 768px) {
    html {
        font-size: 16px;
    }
}

html {
    position: relative;
    min-height: 100%;
}

body {
    margin-bottom: 60px; /* ³����� ��� ������ */
    background-color: #f0fff0; /* ���� �����-��������� ��� ��� ��� */
    color: #2F4F4F; /* �����-���-������� ��� ��������� ������ */
}

h1, h2, h3, h4, h5, h6 {
    color: #2E8B57; /* ������� ������ ��� ��������� */
}

/* ���������� ������ */
.navbar-custom {
    background-color: #90EE90; /* �����-������� */
    border-bottom: 1px solid #3CB371; /* ��������-������� ������ */
}

    .navbar-custom .navbar-brand {
        color: #2F4F4F; /* ������ ��� ������ */
        font-weight: bold;
    }

        .navbar-custom .navbar-brand:hover,
        .navbar-custom .navbar-brand:focus {
            color: #2E8B57;
        }

    .navbar-custom .nav-link {
        color: #2F4F4F; /* ������ ��� �������� */
    }

        .navbar-custom .nav-link:hover,
        .navbar-custom .nav-link:focus {
            color: #006400; /* �����-������� ��� ��������� */
            background-color: rgba(255, 255, 255, 0.2);
        }

    .navbar-custom .navbar-toggler {
        border-color: rgba(47, 79, 79, 0.5); /* ������ ��� ����� ������� */
    }

    .navbar-custom .navbar-toggler-icon {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2847, 79, 79, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
    }


/* ������ */
.btn-primary {
    color: #fff;
    background-color: #3CB371; /* ��������-������� ������ */
    border-color: #2E8B57; /* ������� ������ */
}

    .btn-primary:hover {
        color: #fff;
        background-color: #2E8B57;
        border-color: #20603D;
    }

.btn-secondary {
    color: #fff;
    background-color: #8FBC8F; /* �����-������� ������ */
    border-color: #709670;
}

    .btn-secondary:hover {
        color: #fff;
        background-color: #7AAB7A;
        border-color: #618961;
    }

.btn-danger {
    color: #fff;
    background-color: #FF6347; /* �������� (��� ��������� � �������) */
    border-color: #E0523B;
}

    .btn-danger:hover {
        color: #fff;
        background-color: #D34127;
        border-color: #B83A23;
    }


/* ������� */
.table {
    background-color: #fff; /* ����� ��� ��� ������� ��� ������������ */
}

    .table thead th {
        background-color: #98FB98; /* ����-������� ��� ��������� ������� */
        color: #2F4F4F;
        border-bottom: 2px solid #3CB371;
    }

.table-striped tbody tr:nth-of-type(odd) {
    background-color: #F5FFFA; /* �'����� ���� */
}

.table-hover tbody tr:hover {
    background-color: #E0EEE0; /* ������� ������� ��� ��������� */
}


/* ����� */
.form-control:focus {
    border-color: #3CB371;
    box-shadow: 0 0 0 0.25rem rgba(60, 179, 113, 0.25);
}

/* ����� */
.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    white-space: nowrap;
    line-height: 60px; /* ������ ������ */
    background-color: #E0F2E0; /* ���� ������ ������� ��� ������ */
}

    .footer a {
        color: #2E8B57;
    }

        .footer a:hover {
            color: #006400;
        }

/* ��� �������� */
.field-validation-error {
    color: #FF6347; /* �������� */
}

.validation-summary-errors {
    color: #FF6347;
}

.input-validation-error {
    border-color: #FF6347;
}


// ==== wwwroot\js\site.js ====
// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


