# TravelAgencyDomain Project
==================================================
// ==== TravelAgencyDomain.csproj ====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.0" />
  </ItemGroup>

</Project>


// ==== Model\Booking.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TravelAgencyDomain.Model;

public partial class Booking
{
    [Display(Name = "ID Бронювання")]
    public int BookingId { get; set; }
    [Display(Name = "Клієнт")]
    [Required(ErrorMessage = "Необхідно обрати клієнта.")]
    public int ClientId { get; set; }
    [Display(Name = "Тур")]
    [Required(ErrorMessage = "Необхідно обрати тур.")]
    public int TourId { get; set; }
    [Display(Name = "Співробітник")]
    [Required(ErrorMessage = "Необхідно обрати співробітника.")]
    public int EmployeeId { get; set; }
    [Display(Name = "Дата бронювання")]
    [Required(ErrorMessage = "Дата бронювання є обов'язковою.")]
    [DataType(DataType.DateTime)]
    public DateTime BookingDate { get; set; }
    [Display(Name = "Кількість осіб")]
    [Required(ErrorMessage = "Кількість осіб є обов'язковим полем.")]
    [Range(1, 20, ErrorMessage = "Кількість осіб має бути від 1 до 20.")]
    public int NumberOfPeople { get; set; }
    [Display(Name = "Загальна вартість")]
    [Required(ErrorMessage = "Загальна вартість є обов'язковим полем.")]
    [Column(TypeName = "decimal(18, 2)")]
    [Range(0.01, double.MaxValue, ErrorMessage = "Загальна вартість має бути позитивним числом.")]
    public decimal TotalPrice { get; set; }
    [Display(Name = "Статус")]
    [Required(ErrorMessage = "Статус є обов'язковим полем.")]
    [StringLength(50, ErrorMessage = "Статус не може перевищувати 50 символів.")]
    public string Status { get; set; } = null!;
    [Display(Name = "Клієнт")]
    public virtual Client Client { get; set; } = null!;
    [Display(Name = "Працівник")]
    public virtual Employee Employee { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual Tour Tour { get; set; } = null!;
}


// ==== Model\Client.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Client
{
    public int ClientId { get; set; }

    [Display(Name = "Ім'я")]
    [Required(ErrorMessage = "Поле 'Ім'я' є обов'язковим.")]
    [StringLength(50, ErrorMessage = "Ім'я не може перевищувати 50 символів.")]
    [RegularExpression(@"^[А-ЯІЇЄҐA-Z][а-яіїєґa-z'-]*$", ErrorMessage = "Ім'я має починатися з великої літери та містити тільки літери, апостроф або дефіс.")]
    public string FirstName { get; set; } = null!;
    [Display(Name = "Прізвище")]
    [Required(ErrorMessage = "Поле 'Прізвище' є обов'язковим.")]
    [StringLength(50, ErrorMessage = "Прізвище не може перевищувати 50 символів.")]
    [RegularExpression(@"^[А-ЯІЇЄҐA-Z][а-яіїєґa-z'-]*$", ErrorMessage = "Прізвище має починатися з великої літери та містити тільки літери, апостроф або дефіс.")]
    public string LastName { get; set; } = null!;
    [Display(Name = "Номер телефону")]
    [StringLength(10, MinimumLength = 10, ErrorMessage = "Номер телефону має складатися рівно з 10 цифр.")]
    [RegularExpression(@"^\d{10}$", ErrorMessage = "Номер телефону має складатися рівно з 10 цифр.")]
    [DataType(DataType.PhoneNumber)]
    public string? PhoneNumber { get; set; }
    [Display(Name = "Електронна пошта")]
    [StringLength(100, ErrorMessage = "Електронна пошта не може перевищувати 100 символів.")]
    [EmailAddress(ErrorMessage = "Некоректний формат електронної пошти.")]
    public string? Email { get; set; }
    [Display(Name = "Дата народження")]
    [DataType(DataType.Date)]
    public DateOnly? DateOfBirth { get; set; }

    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();

    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();
    public static ValidationResult? ValidateAgeRange(DateOnly? dateOfBirth, ValidationContext context)
    {
        if (dateOfBirth == null)
        {
            return new ValidationResult("Дата народження є обов'язковим полем.");
        }

        var today = DateOnly.FromDateTime(DateTime.Today);
        
        var minBirthDateFor18 = today.AddYears(-18); 
        var maxBirthDateFor100 = today.AddYears(-100); 

        if (dateOfBirth > minBirthDateFor18) 
        {
            return new ValidationResult($"Клієнту має бути щонайменше 18 років. Максимально допустима дата народження: {minBirthDateFor18:yyyy-MM-dd}.");
        }

        if (dateOfBirth < maxBirthDateFor100) 
        {
            return new ValidationResult($"Вік клієнта не може перевищувати 100 років. Мінімально допустима дата народження: {maxBirthDateFor100:yyyy-MM-dd}.");
        }

        return ValidationResult.Success;
    }

}


// ==== Model\Country.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Country
{
    public int CountryId { get; set; }
    [Display(Name = "Країна")]
    [Required(ErrorMessage = "Назва країни є обов'язковим полем.")]
    [StringLength(100, ErrorMessage = "Назва країни не може перевищувати 100 символів.")]
    [RegularExpression(@"^[^0-9]*$", ErrorMessage = "Назва країни не може містити цифри.")]
    public string CountryName { get; set; } = null!;
    [Display(Name = "Чи потрібна віза")]
    public bool VisaRequired { get; set; }
    [Display(Name = "Частина світу")]
    [StringLength(50, ErrorMessage = "Назва частини світу не може перевищувати 50 символів.")]
    [RegularExpression(@"^[^0-9]*$", ErrorMessage = "Назва частини світу не може містити цифри.")]
    public string? Continent { get; set; }
    [Display(Name = "Готель")]
    public virtual ICollection<Hotel> Hotels { get; set; } = new List<Hotel>();
    [Display(Name = "Тур")]
    public virtual ICollection<Tour> Tours { get; set; } = new List<Tour>();
}


// ==== Model\Employee.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Employee
{
    public int EmployeeId { get; set; }
    [Display(Name = "Ім'я")]
    [Required(ErrorMessage = "Ім'я співробітника є обов'язковим.")]
    [StringLength(50, ErrorMessage = "Ім'я не може перевищувати 50 символів.")]
    public string FirstName { get; set; } = null!;
    [Display(Name = "Прізвище")]
    [Required(ErrorMessage = "Прізвище співробітника є обов'язковим.")]
    [StringLength(50, ErrorMessage = "Прізвище не може перевищувати 50 символів.")]
    public string LastName { get; set; } = null!;
    [Display(Name = "Посада")]
    [StringLength(100, ErrorMessage = "Назва посади не може перевищувати 100 символів.")]
    public string? Position { get; set; }
    [Display(Name = "Дата прийому")]
    [DataType(DataType.Date)]
    public DateOnly? HireDate { get; set; }
    [Display(Name = "Номер телефону")]
    [StringLength(10, MinimumLength = 10, ErrorMessage = "Номер телефону має складатися рівно з 10 цифр.")]
    [RegularExpression(@"^\d{10}$", ErrorMessage = "Номер телефону має складатися рівно з 10 цифр (тільки цифри).")]
    [DataType(DataType.PhoneNumber)]
    public string? PhoneNumber { get; set; }
    [Display(Name = "Електронна пошта")]
    [StringLength(100, ErrorMessage = "Електронна пошта не може перевищувати 100 символів.")]
    [EmailAddress(ErrorMessage = "Некоректний формат електронної пошти.")]
    public string? Email { get; set; }

    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();
}


// ==== Model\Hotel.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Hotel
{
    public int HotelId { get; set; }
    [Display(Name = "Назва Готелю")]
    [Required(ErrorMessage = "Назва готелю є обов'язковим полем.")]
    [StringLength(100, ErrorMessage = "Назва готелю не може перевищувати 100 символів.")]
    public string HotelName { get; set; } = null!;
    [Display(Name = "Країна")]
    [Required(ErrorMessage = "Необхідно обрати країну.")]
    public int CountryId { get; set; }

    [Display(Name = "Місто")]
    [StringLength(100, ErrorMessage = "Назва міста не може перевищувати 100 символів.")]
    [RegularExpression(@"^[^0-9]*$", ErrorMessage = "Назва міста не може містити цифри.")]
    public string? City { get; set; }
    [Display(Name = "Рейтинг (зірки)")]
    [Required(ErrorMessage = "Рейтинг є обов'язковим полем.")]
    [Range(1, 5, ErrorMessage = "Рейтинг має бути від 1 до 5.")]
    public int StarRating { get; set; }
    [Display(Name = "Адреса")]
    [StringLength(200, ErrorMessage = "Адреса не може перевищувати 200 символів.")]
    public string? Address { get; set; }
    [Display(Name = "Опис")]
    [DataType(DataType.MultilineText)]
    public string? Description { get; set; }
    [Display(Name = "Країна")]
    public virtual Country Country { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual ICollection<Tour> Tours { get; set; } = new List<Tour>();
}


// ==== Model\Review.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace TravelAgencyDomain.Model;

public partial class Review
{
    [Display(Name = "ID Відгука")]
    public int ReviewId { get; set; }
    [Display(Name = "Тур")]
    [Required(ErrorMessage = "Необхідно обрати тур.")]
    public int TourId { get; set; }
    [Display(Name = "Клієнт")]
    [Required(ErrorMessage = "Необхідно обрати клієнта.")]
    public int ClientId { get; set; }
    [Display(Name = "Рейтинг")]
    [Required(ErrorMessage = "Рейтинг є обов'язковим.")]
    [Range(1, 5, ErrorMessage = "Рейтинг має бути від 1 до 5.")]
    public int Rating { get; set; }
    [Display(Name = "Відгук")]
    [DataType(DataType.MultilineText)]
    public string? CommentText { get; set; }
    [Display(Name = "Дата відгуку")]
    [Required(ErrorMessage = "Дата відгуку є обов'язковою.")]
    [DataType(DataType.DateTime)]
    public DateTime ReviewDate { get; set; }
    [Display(Name = "Клієнт")]
    public virtual Client Client { get; set; } = null!;
    [Display(Name = "Тур")]
    public virtual Tour Tour { get; set; } = null!;
}


// ==== Model\Tour.cs ====
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TravelAgencyDomain.Model;

public partial class Tour
{
    public int TourId { get; set; }
    [Display(Name = "Назва туру")]
    [Required(ErrorMessage = "Назва туру є обов'язковим полем.")]
    [StringLength(200, ErrorMessage = "Назва туру не може перевищувати 200 символів.")]
    public string TourName { get; set; } = null!;
    [Display(Name = "Країна")]
    [Required(ErrorMessage = "Необхідно обрати країну.")]
    public int CountryId { get; set; }
    [Display(Name = "Готель")]
    [Required(ErrorMessage = "Необхідно обрати готель.")]
    public int HotelId { get; set; }
    [Display(Name = "Дата початку")]
    [Required(ErrorMessage = "Дата початку є обов'язковим полем.")]
    [DataType(DataType.DateTime)]
    public DateTime StartDate { get; set; }
    [Display(Name = "Тривалість (днів)")]
    [Required(ErrorMessage = "Тривалість є обов'язковим полем.")]
    [Range(1, 90, ErrorMessage = "Тривалість туру має бути від 1 до 90 днів.")]
    public int DurationDays { get; set; }
    [Display(Name = "Ціна за особу")]
    [Required(ErrorMessage = "Ціна є обов'язковим полем.")]
    [Column(TypeName = "decimal(18, 2)")]
    [Range(0.01, double.MaxValue, ErrorMessage = "Ціна має бути позитивним числом.")]
    public decimal PricePerPerson { get; set; }
    [Display(Name = "Тип транспорту")]
    [StringLength(50)]
    public string? TransportType { get; set; }
    [Display(Name = "Опис")]
    public string? Description { get; set; }
    [Display(Name = "Макс. учасників")]
    [Range(1, 200, ErrorMessage = "Максимальна кількість учасників має бути позитивним числом (до 200).")]
    public int? MaxParticipants { get; set; }
    [Display(Name = "Бронювання")]
    public virtual ICollection<Booking> Bookings { get; set; } = new List<Booking>();
    [Display(Name = "Країна")]
    [ForeignKey("CountryId")]
    public virtual Country Country { get; set; } = null!;
    [Display(Name = "Готель")]
    [ForeignKey("HotelId")]
    public virtual Hotel Hotel { get; set; } = null!;
    [Display(Name = "Відгуки")]
    public virtual ICollection<Review> Reviews { get; set; } = new List<Review>();
}


# TravelAgencyInfrastructure Project
==================================================
// ==== appsettings.json ====
{
    "ConnectionStrings": {
        "DefaultConnection": "Server=DESKTOP-D2I193F\\SQLEXPRESS;Database=TravelAgencyDB;Trusted_Connection=True;MultipleActiveResultSets=true;Encrypt=False;TrustServerCertificate=True"
    },
    "Logging": {
        "LogLevel": {
            "Default": "Information",
            "Microsoft.AspNetCore": "Warning"
        }
    },
    "AllowedHosts": "*"
}

// ==== Program.cs ====
// ����: TravelAgencyInfrastructure/Program.cs
using TravelAgencyInfrastructure; // Namespace, �� ����������� ��� TravelAgencyDbContext
using TravelAgencyDomain.Model;   // Namespace, �� ����������� ���� �����
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews(); // ��� MVC

// ��������� DbContext
builder.Services.AddDbContext<TravelAgencyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")

));


var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment()) // � ����� �������� ����� ������ �������� �������
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}
else
{
    app.UseDeveloperExceptionPage(); // ������ �������� ������� ������� ��� ����������
}

app.UseHttpsRedirection();
app.UseStaticFiles(); // ��� CSS, JS, ��������� � wwwroot

app.UseRouting();

app.UseAuthorization(); // ���� ������ �������� ��������������/�����������

// ������� �� ������������� ��� MVC ����������
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
// app.MapStaticAssets(); // �� ���� ���� ���������� ��� ������ �������, ���� ������������� Blazor ��� ���� ������. ��� ������� MVC �������� �� �������.
// .WithStaticAssets(); // ���������

app.Run();

// ==== TravelAgencyDbContext.cs ====
// Файл: TravelAgencyInfrastructure/TravelAgencyDbContext.cs
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model; // Важливо! Переконайтеся, що моделі з правильного namespace

namespace TravelAgencyInfrastructure // Namespace для DbContext
{
    public partial class TravelAgencyDbContext : DbContext
    {
        public TravelAgencyDbContext() // Цей конструктор може бути потрібен для деяких інструментів
        {
        }

        public TravelAgencyDbContext(DbContextOptions<TravelAgencyDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Tour> Tours { get; set; }

        // МЕТОД OnConfiguring ТУТ НЕ ПОТРІБЕН, якщо ви налаштовуєте підключення в Program.cs
        // Якщо він тут є з жорстко прописаним рядком підключення, видаліть його:
        /*
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
            // if (!optionsBuilder.IsConfigured) // Ця перевірка важлива, якщо метод залишається
            // {
            //    optionsBuilder.UseSqlServer("ВАШ_РЯДОК_ПІДКЛЮЧЕННЯ_ТУТ_ЯКЩО_НЕ_З_PROGRAM_CS");
            // }
        }
        */

        // Метод OnModelCreating залишається таким, яким його згенерував EF Core Database First
        // (з вашого файлу ProjectEssentials.txt)
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasKey(e => e.BookingId).HasName("PK__Bookings__73951ACDA8D9FC82"); // Приклад з вашого файлу

                entity.Property(e => e.BookingId).HasColumnName("BookingID");
                entity.Property(e => e.BookingDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.TourId).HasColumnName("TourID");

                entity.HasOne(d => d.Client).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Clients");

                entity.HasOne(d => d.Employee).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Employees");

                entity.HasOne(d => d.Tour).WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.TourId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bookings_Tours");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasKey(e => e.ClientId).HasName("PK__Clients__E67E1A04A7B26927");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryId).HasName("PK__Countrie__10D160BF15B78EEE");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.Continent).HasMaxLength(50);
                entity.Property(e => e.CountryName).HasMaxLength(100);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmployeeId).HasName("PK__Employee__7AD04FF100F381DB");
                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
                entity.Property(e => e.Position).HasMaxLength(100);
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.HasKey(e => e.HotelId).HasName("PK__Hotels__46023BBF75579549");
                entity.Property(e => e.HotelId).HasColumnName("HotelID");
                entity.Property(e => e.Address).HasMaxLength(200);
                entity.Property(e => e.City).HasMaxLength(100);
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.HotelName).HasMaxLength(100);

                entity.HasOne(d => d.Country).WithMany(p => p.Hotels)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Hotels_Countries");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(e => e.ReviewId).HasName("PK__Reviews__74BC79AEA655B205");
                entity.Property(e => e.ReviewId).HasColumnName("ReviewID");
                entity.Property(e => e.ClientId).HasColumnName("ClientID");
                entity.Property(e => e.ReviewDate).HasDefaultValueSql("(getdate())");
                entity.Property(e => e.TourId).HasColumnName("TourID");

                entity.HasOne(d => d.Client).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Clients");

                entity.HasOne(d => d.Tour).WithMany(p => p.Reviews)
                    .HasForeignKey(d => d.TourId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reviews_Tours");
            });

            modelBuilder.Entity<Tour>(entity =>
            {
                entity.HasKey(e => e.TourId).HasName("PK__Tours__604CEA10923614F1");
                entity.Property(e => e.TourId).HasColumnName("TourID");
                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.HotelId).HasColumnName("HotelID");
                entity.Property(e => e.PricePerPerson).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.TourName).HasMaxLength(200);
                entity.Property(e => e.TransportType).HasMaxLength(50);

                entity.HasOne(d => d.Country).WithMany(p => p.Tours)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tours_Countries");

                entity.HasOne(d => d.Hotel).WithMany(p => p.Tours)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tours_Hotels");
            });

            OnModelCreatingPartial(modelBuilder); // Залиште цей рядок, якщо він був згенерований
        }

        // Залиште цей рядок, якщо він був згенерований
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}

// ==== Controllers\BookingsController.cs ====
// Файл: TravelAgencyInfrastructure/Controllers/BookingsController.cs
using System;
using System.Collections.Generic; // Для List<SelectListItem>
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering; // Для SelectList та SelectListItem
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class BookingsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public BookingsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Bookings
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Bookings
                .Include(b => b.Client)
                .Include(b => b.Employee)
                .Include(b => b.Tour);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Bookings/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();

            var booking = await _context.Bookings
                .Include(b => b.Client)
                .Include(b => b.Employee)
                .Include(b => b.Tour)
                .FirstOrDefaultAsync(m => m.BookingId == id);
            if (booking == null) return NotFound();

            return View(booking);
        }

        // GET: Bookings/Create
        public IActionResult Create()
        {
            
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName");
            ViewData["EmployeeId"] = new SelectList(_context.Employees.Select(e => new { e.EmployeeId, FullName = e.FirstName + " " + e.LastName }), "EmployeeId", "FullName");
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName");

            ViewData["StatusList"] = GetStatusSelectList();

            var booking = new Booking
            {
                BookingDate = DateTime.Now // Встановлюємо поточну дату для нового бронювання
            };
            return View(booking);
        }

        // POST: Bookings/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ClientId,TourId,EmployeeId,BookingDate,NumberOfPeople,TotalPrice,Status")] Booking booking)
        {
            // Валідація дати бронювання
            if (booking.BookingDate < DateTime.Today.AddYears(-1) || booking.BookingDate > DateTime.Today.AddYears(1))
            {
                ModelState.AddModelError("BookingDate", "Дата бронювання має бути в межах одного року від поточної дати.");
            }

            var clientExists = await _context.Clients.AnyAsync(c => c.ClientId == booking.ClientId);
            var tourExists = await _context.Tours.AnyAsync(t => t.TourId == booking.TourId);
            var employeeExists = await _context.Employees.AnyAsync(e => e.EmployeeId == booking.EmployeeId);

            if (!clientExists) ModelState.AddModelError("ClientId", "Обраного клієнта не існує.");
            if (!tourExists) ModelState.AddModelError("TourId", "Обраного туру не існує.");
            if (!employeeExists) ModelState.AddModelError("EmployeeId", "Обраного співробітника не існує.");

            var tour = await _context.Tours.FindAsync(booking.TourId);
            if (tour != null && booking.NumberOfPeople > 0)
            {
                // Розраховуємо TotalPrice тільки якщо воно не було встановлено (або = 0)
                if (booking.TotalPrice == 0)
                {
                    booking.TotalPrice = tour.PricePerPerson * booking.NumberOfPeople;
                }
            }
            else if (tour == null && ModelState.ContainsKey("TourId") && !ModelState["TourId"].Errors.Any()) // Якщо помилки по TourId ще не було
            {
                ModelState.AddModelError("TourId", "Не вдалося знайти тур для розрахунку ціни.");
            }

            // Перевірка, чи обраний статус є допустимим
            var validStatuses = GetStatusSelectList().Select(s => s.Value);
            if (!validStatuses.Contains(booking.Status))
            {
                ModelState.AddModelError("Status", "Обрано некоректний статус.");
            }
            ModelState.Remove("Status");
            ModelState.Remove("Client");
            ModelState.Remove("Employee");
            ModelState.Remove("Tour");

            if (ModelState.IsValid)
            {
                _context.Add(booking);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }

            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees.Select(e => new { e.EmployeeId, FullName = e.FirstName + " " + e.LastName }), "EmployeeId", "FullName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            ViewData["StatusList"] = GetStatusSelectList(booking.Status);
            return View(booking);
        }

        // GET: Bookings/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();

            var booking = await _context.Bookings.FindAsync(id);
            if (booking == null) return NotFound();

            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees.Select(e => new { e.EmployeeId, FullName = e.FirstName + " " + e.LastName }), "EmployeeId", "FullName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            ViewData["StatusList"] = GetStatusSelectList(booking.Status);
            return View(booking);
        }

        // POST: Bookings/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("BookingId,ClientId,TourId,EmployeeId,BookingDate,NumberOfPeople,TotalPrice,Status")] Booking booking)
        {
            if (id != booking.BookingId) return NotFound();

            if (booking.BookingDate < DateTime.Today.AddYears(-1) || booking.BookingDate > DateTime.Today.AddYears(1))
            {
                ModelState.AddModelError("BookingDate", "Дата бронювання має бути в межах одного року від поточної дати.");
            }
            if (!await _context.Clients.AnyAsync(c => c.ClientId == booking.ClientId))
                ModelState.AddModelError("ClientId", "Обраного клієнта не існує.");
            if (!await _context.Tours.AnyAsync(t => t.TourId == booking.TourId))
                ModelState.AddModelError("TourId", "Обраного туру не існує.");
            if (!await _context.Employees.AnyAsync(e => e.EmployeeId == booking.EmployeeId))
                ModelState.AddModelError("EmployeeId", "Обраного співробітника не існує.");

            var tour = await _context.Tours.FindAsync(booking.TourId);
            if (tour != null && booking.NumberOfPeople > 0)
            {
                if (booking.TotalPrice == 0)
                {
                    booking.TotalPrice = tour.PricePerPerson * booking.NumberOfPeople;
                }
            }
            else if (tour == null && ModelState.ContainsKey("TourId") && !ModelState["TourId"].Errors.Any())
            {
                ModelState.AddModelError("TourId", "Не вдалося знайти тур для розрахунку ціни.");
            }

            var validStatuses = GetStatusSelectList().Select(s => s.Value);
            if (!validStatuses.Contains(booking.Status))
            {
                ModelState.AddModelError("Status", "Обрано некоректний статус.");
            }
            ModelState.Remove("Status");
            ModelState.Remove("Client");
            ModelState.Remove("Employee");
            ModelState.Remove("Tour");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(booking);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!BookingExists(booking.BookingId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", booking.ClientId);
            ViewData["EmployeeId"] = new SelectList(_context.Employees.Select(e => new { e.EmployeeId, FullName = e.FirstName + " " + e.LastName }), "EmployeeId", "FullName", booking.EmployeeId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", booking.TourId);
            ViewData["StatusList"] = GetStatusSelectList(booking.Status);
            return View(booking);
        }

        // GET: Bookings/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var booking = await _context.Bookings
                .Include(b => b.Client)
                .Include(b => b.Employee)
                .Include(b => b.Tour)
                .FirstOrDefaultAsync(m => m.BookingId == id);
            if (booking == null) return NotFound();
            return View(booking);
        }

        // POST: Bookings/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var booking = await _context.Bookings.FindAsync(id);
            if (booking != null)
            {
                _context.Bookings.Remove(booking);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool BookingExists(int id)
        {
            return _context.Bookings.Any(e => e.BookingId == id);
        }

        // Допоміжний метод для створення списку статусів
        private SelectList GetStatusSelectList(string? selectedStatus = null)
        {
            var statuses = new List<SelectListItem>
            {
                new SelectListItem { Value = "PendingPayment", Text = "Очікує оплати" },
                new SelectListItem { Value = "Confirmed", Text = "Підтверджено" },
                new SelectListItem { Value = "Cancelled", Text = "Скасовано" },
                new SelectListItem { Value = "Completed", Text = "Завершено" }
                // Додайте інші статуси, якщо потрібно
            };
            return new SelectList(statuses, "Value", "Text", selectedStatus);
        }
        // GET: Bookings/SearchByEmployeeAndDate
        public async Task<IActionResult> SearchByEmployeeAndDate(int? employeeId, DateTime? startDate, DateTime? endDate)
        {
            // Заповнюємо ViewData для випадаючого списку співробітників та збереження параметрів
            ViewData["EmployeeIdList"] = new SelectList(_context.Employees.Select(e => new { e.EmployeeId, FullName = e.FirstName + " " + e.LastName }), "EmployeeId", "FullName", employeeId);
            ViewData["CurrentEmployeeId"] = employeeId;
            ViewData["CurrentStartDate"] = startDate?.ToString("yyyy-MM-ddTHH:mm"); // Для datetime-local
            ViewData["CurrentEndDate"] = endDate?.ToString("yyyy-MM-ddTHH:mm");     // Для datetime-local

            if (_context.Bookings == null)
            {
                return Problem("Entity set 'TravelAgencyDbContext.Bookings' is null.");
            }

            var bookingsQuery = _context.Bookings
                                      .Include(b => b.Client)
                                      .Include(b => b.Tour)
                                      .Include(b => b.Employee)
                                      .AsQueryable();

            bool hasParameters = false;

            if (employeeId.HasValue && employeeId.Value > 0)
            {
                bookingsQuery = bookingsQuery.Where(b => b.EmployeeId == employeeId.Value);
                hasParameters = true;
            }

            if (startDate.HasValue)
            {
                bookingsQuery = bookingsQuery.Where(b => b.BookingDate >= startDate.Value);
                hasParameters = true;
            }

            if (endDate.HasValue)
            {
                // Додаємо один день до endDate, щоб включити весь день endDate
                bookingsQuery = bookingsQuery.Where(b => b.BookingDate < endDate.Value.AddDays(1));
                hasParameters = true;
            }

            List<Booking> bookingsResult;
            if (hasParameters)
            {
                bookingsResult = await bookingsQuery.OrderByDescending(b => b.BookingDate).ToListAsync();
            }
            else
            {
               
                bookingsResult = new List<Booking>();
                if (employeeId.HasValue || startDate.HasValue || endDate.HasValue)
                {
                    
                }
                else
                {
                    ViewData["NoParametersMessage"] = "Будь ласка, оберіть співробітника та/або вкажіть діапазон дат для пошуку.";
                }

            }
            return View(bookingsResult);
        }

    }
}

// ==== Controllers\ClientsController.cs ====

using System;
using System.Globalization; 
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure; 

namespace TravelAgencyInfrastructure.Controllers
{
    public class ClientsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ClientsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Clients
        public async Task<IActionResult> Index()
        {
            return View(await _context.Clients.ToListAsync());
        }

        // GET: Clients/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var client = await _context.Clients.FirstOrDefaultAsync(m => m.ClientId == id);
            if (client == null) return NotFound();
            return View(client);
        }

        // GET: Clients/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Clients/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("FirstName,LastName,PhoneNumber,Email,DateOfBirth")] Client client)
        {
            //  Автоматична зміна регістру для Ім'я та Прізвище
            if (!string.IsNullOrEmpty(client.FirstName))
            {
                client.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(client.FirstName.ToLower());
            }
            if (!string.IsNullOrEmpty(client.LastName))
            {
                client.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(client.LastName.ToLower());
            }

            
            //  Перевірка на унікальність (Ім'я + Прізвище + Пошта + Телефон)
            if (!string.IsNullOrEmpty(client.Email) || !string.IsNullOrEmpty(client.PhoneNumber))
            {
                bool exists = await _context.Clients.AnyAsync(c =>
                    c.FirstName == client.FirstName &&
                    c.LastName == client.LastName &&
                    ((!string.IsNullOrEmpty(client.Email) && c.Email == client.Email) ||
                     (!string.IsNullOrEmpty(client.PhoneNumber) && c.PhoneNumber == client.PhoneNumber))
                );
                if (exists)
                {
                    ModelState.AddModelError(string.Empty, "Клієнт з таким Ім'ям, Прізвищем та контактними даними (пошта/телефон) вже існує.");
                }
            }
            ModelState.Remove("FirstName");
            ModelState.Remove("LastName");

            if (ModelState.IsValid)
            {
                _context.Add(client);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(client);
        }

        // GET: Clients/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var client = await _context.Clients.FindAsync(id);
            if (client == null) return NotFound();
            return View(client);
        }

        // POST: Clients/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ClientId,FirstName,LastName,PhoneNumber,Email,DateOfBirth")] Client client)
        {
            if (id != client.ClientId) return NotFound();

            // Автоматична зміна регістру
            if (!string.IsNullOrEmpty(client.FirstName))
            {
                client.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(client.FirstName.ToLower());
            }
            if (!string.IsNullOrEmpty(client.LastName))
            {
                client.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(client.LastName.ToLower());
            }

            //  Валідація дати народження
            if (client.DateOfBirth.HasValue)
            {
                var today = DateOnly.FromDateTime(DateTime.Today);
                var age = today.Year - client.DateOfBirth.Value.Year;
                if (client.DateOfBirth.Value > today.AddYears(-age)) age--;

                if (age < 18 || age > 100)
                {
                    ModelState.AddModelError("DateOfBirth", "Вік клієнта має бути від 18 до 100 років.");
                }
            }
            else
            {
                ModelState.AddModelError("DateOfBirth", "Дата народження є обов'язковою.");
            }

            // Перевірка на унікальність (окрім поточного запису)
            if (!string.IsNullOrEmpty(client.Email) || !string.IsNullOrEmpty(client.PhoneNumber))
            {
                bool exists = await _context.Clients.AnyAsync(c =>
                    c.ClientId != client.ClientId && // Ігноруємо поточний запис
                    c.FirstName == client.FirstName &&
                    c.LastName == client.LastName &&
                    ((!string.IsNullOrEmpty(client.Email) && c.Email == client.Email) ||
                     (!string.IsNullOrEmpty(client.PhoneNumber) && c.PhoneNumber == client.PhoneNumber))
                );
                if (exists)
                {
                    ModelState.AddModelError(string.Empty, "Інший клієнт з таким Ім'ям, Прізвищем та контактними даними (пошта/телефон) вже існує.");
                }
            }
            ModelState.Remove("FirstName");
            ModelState.Remove("LastName");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(client);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ClientExists(client.ClientId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            return View(client);
        }

        // GET: Clients/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var client = await _context.Clients.FirstOrDefaultAsync(m => m.ClientId == id);
            if (client == null) return NotFound();
            return View(client);
        }

        // POST: Clients/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var client = await _context.Clients.FindAsync(id);
            if (client != null)
            {
                // Перевірка на пов'язані бронювання або відгуки
                bool hasBookings = await _context.Bookings.AnyAsync(b => b.ClientId == id);
                bool hasReviews = await _context.Reviews.AnyAsync(r => r.ClientId == id);

                if (hasBookings || hasReviews)
                {
                    ModelState.AddModelError(string.Empty, "Неможливо видалити клієнта, оскільки є пов'язані бронювання або відгуки.");
                    
                    return View("Delete", client);
                }
                _context.Clients.Remove(client);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }
        // GET: Clients/SearchActiveClients
        public async Task<IActionResult> SearchActiveClients(string? searchTerm)
        {
            ViewData["CurrentSearchTerm"] = searchTerm;

            if (_context.Clients == null)
            {
                return Problem("Entity set 'TravelAgencyDbContext.Clients' is null.");
            }

            // Починаємо з IQueryable<Client>
            var clientsQuery = _context.Clients.AsQueryable();

            // Фільтрація за searchTerm
            if (!string.IsNullOrEmpty(searchTerm))
            {
                clientsQuery = clientsQuery.Where(c =>
                    (c.FirstName != null && c.FirstName.Contains(searchTerm)) ||
                    (c.LastName != null && c.LastName.Contains(searchTerm))
                );
            }

            clientsQuery = clientsQuery.Where(c => c.Bookings.Any());

            var activeClients = await clientsQuery
                                        .Include(c => c.Bookings) 
                                        .OrderBy(c => c.LastName).ThenBy(c => c.FirstName) 
                                        .ToListAsync();

            if (!activeClients.Any() && !string.IsNullOrEmpty(searchTerm))
            {
                ViewData["NoResultsMessage"] = "Активних клієнтів (з бронюваннями) за вашим запитом не знайдено.";
            }
            else if (!activeClients.Any() && string.IsNullOrEmpty(searchTerm))
            {
               
                ViewData["NoResultsMessage"] = "Активних клієнтів (з бронюваннями) не знайдено.";
            }


            return View(activeClients); 
        }
        private bool ClientExists(int id)
        {
            return _context.Clients.Any(e => e.ClientId == id);
        }
    }
}

// ==== Controllers\CountriesController.cs ====
// Файл: TravelAgencyInfrastructure/Controllers/CountriesController.cs
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class CountriesController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public CountriesController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Countries
        public async Task<IActionResult> Index()
        {
            return View(await _context.Countries.ToListAsync());
        }

        // GET: Countries/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var country = await _context.Countries.FirstOrDefaultAsync(m => m.CountryId == id);
            if (country == null) return NotFound();
            return View(country);
        }

        // GET: Countries/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Countries/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CountryName,VisaRequired,Continent")] Country country)
        {
            // Перевірка на унікальність назви країни 
            if (await _context.Countries.AnyAsync(c => c.CountryName.ToLower() == country.CountryName.ToLower()))
            {
                ModelState.AddModelError("CountryName", "Країна з такою назвою вже існує.");
            }
            
            ModelState.Remove("CountryName");
            if (ModelState.IsValid)
            {
                _context.Add(country);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(country);
        }

        // GET: Countries/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var country = await _context.Countries.FindAsync(id);
            if (country == null) return NotFound();
            return View(country);
        }

        // POST: Countries/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("CountryId,CountryName,VisaRequired,Continent")] Country country)
        {
            if (id != country.CountryId) return NotFound();

            // Перевірка на унікальність назви країни (без урахування регістру), окрім поточного запису
            if (await _context.Countries.AnyAsync(c => c.CountryId != country.CountryId && c.CountryName.ToLower() == country.CountryName.ToLower()))
            {
                ModelState.AddModelError("CountryName", "Країна з такою назвою вже існує.");
            }

            ModelState.Remove("CountryName");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(country);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CountryExists(country.CountryId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            return View(country);
        }

        // GET: Countries/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var country = await _context.Countries.FirstOrDefaultAsync(m => m.CountryId == id);
            if (country == null) return NotFound();
            return View(country);
        }

        // POST: Countries/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Countries == null)
            {
                return Problem("Entity set 'TravelAgencyDbContext.Countries' is null.");
            }
            var country = await _context.Countries.FindAsync(id);
            if (country != null)
            {
                bool hasRelatedTours = await _context.Tours.AnyAsync(t => t.CountryId == id);
                bool hasRelatedHotels = await _context.Hotels.AnyAsync(h => h.CountryId == id);

                if (hasRelatedTours || hasRelatedHotels)
                {
                    ModelState.AddModelError(string.Empty, "Неможливо видалити країну. Вона має пов'язані тури або готелі. Спочатку видаліть або перепризначте їх.");
                    var countryToDeleteView = await _context.Countries.FirstOrDefaultAsync(m => m.CountryId == id); // Повторно завантажуємо для View
                    return View("Delete", countryToDeleteView);
                }
                _context.Countries.Remove(country);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool CountryExists(int id)
        {
            return (_context.Countries?.Any(e => e.CountryId == id)).GetValueOrDefault();
        }
    }
}

// ==== Controllers\EmployeesController.cs ====

using System;
using System.Globalization; 
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class EmployeesController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public EmployeesController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Employees
        public async Task<IActionResult> Index()
        {
            return View(await _context.Employees.ToListAsync());
        }

        // GET: Employees/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var employee = await _context.Employees.FirstOrDefaultAsync(m => m.EmployeeId == id);
            if (employee == null) return NotFound();
            return View(employee);
        }

        // GET: Employees/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Employees/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("FirstName,LastName,Position,HireDate,PhoneNumber,Email")] Employee employee)
        {
            // Автоматична зміна регістру
            if (!string.IsNullOrEmpty(employee.FirstName))
            {
                employee.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employee.FirstName.ToLower());
            }
            if (!string.IsNullOrEmpty(employee.LastName))
            {
                employee.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employee.LastName.ToLower());
            }

            // Валідація HireDate (не в майбутньому)
            if (employee.HireDate.HasValue && employee.HireDate.Value > DateOnly.FromDateTime(DateTime.Today))
            {
                ModelState.AddModelError("HireDate", "Дата прийому на роботу не може бути в майбутньому.");
            }

            // Перевірка на унікальність Email (якщо вказано)
            if (!string.IsNullOrEmpty(employee.Email) && await _context.Employees.AnyAsync(e => e.Email == employee.Email))
            {
                ModelState.AddModelError("Email", "Співробітник з такою електронною поштою вже існує.");
            }

            // Перевірка на унікальність PhoneNumber (якщо вказано)
            if (!string.IsNullOrEmpty(employee.PhoneNumber) && await _context.Employees.AnyAsync(e => e.PhoneNumber == employee.PhoneNumber))
            {
                ModelState.AddModelError("PhoneNumber", "Співробітник з таким номером телефону вже існує.");
            }


            ModelState.Remove("LastName");
            ModelState.Remove("FirstName");
            if (ModelState.IsValid)
            {
                _context.Add(employee);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(employee);
        }

        // GET: Employees/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var employee = await _context.Employees.FindAsync(id);
            if (employee == null) return NotFound();
            return View(employee);
        }

        // POST: Employees/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("EmployeeId,FirstName,LastName,Position,HireDate,PhoneNumber,Email")] Employee employee)
        {
            if (id != employee.EmployeeId) return NotFound();

            // Автоматична зміна регістру
            if (!string.IsNullOrEmpty(employee.FirstName))
            {
                employee.FirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employee.FirstName.ToLower());
            }
            if (!string.IsNullOrEmpty(employee.LastName))
            {
                employee.LastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(employee.LastName.ToLower());
            }

            // Валідація HireDate
            if (employee.HireDate.HasValue && employee.HireDate.Value > DateOnly.FromDateTime(DateTime.Today))
            {
                ModelState.AddModelError("HireDate", "Дата прийому на роботу не може бути в майбутньому.");
            }

            // Перевірка на унікальність Email (окрім поточного запису)
            if (!string.IsNullOrEmpty(employee.Email) && await _context.Employees.AnyAsync(e => e.EmployeeId != employee.EmployeeId && e.Email == employee.Email))
            {
                ModelState.AddModelError("Email", "Інший співробітник з такою електронною поштою вже існує.");
            }

            // Перевірка на унікальність PhoneNumber (окрім поточного запису)
            if (!string.IsNullOrEmpty(employee.PhoneNumber) && await _context.Employees.AnyAsync(e => e.EmployeeId != employee.EmployeeId && e.PhoneNumber == employee.PhoneNumber))
            {
                ModelState.AddModelError("PhoneNumber", "Інший співробітник з таким номером телефону вже існує.");
            }
            ModelState.Remove("LastName");
            ModelState.Remove("FirstName");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(employee);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!EmployeeExists(employee.EmployeeId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            return View(employee);
        }

        // GET: Employees/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var employee = await _context.Employees.FirstOrDefaultAsync(m => m.EmployeeId == id);
            if (employee == null) return NotFound();
            return View(employee);
        }

        // POST: Employees/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var employee = await _context.Employees.FindAsync(id);
            if (employee != null)
            {
                // Перевірка на пов'язані бронювання
                bool hasBookings = await _context.Bookings.AnyAsync(b => b.EmployeeId == id);
                if (hasBookings)
                {
                    ModelState.AddModelError(string.Empty, "Неможливо видалити співробітника, оскільки за ним закріплені бронювання. Спочатку перепризначте або видаліть ці бронювання.");
                    
                    var employeeToDeleteView = await _context.Employees.FirstOrDefaultAsync(m => m.EmployeeId == id);
                    return View("Delete", employeeToDeleteView);
                }
                _context.Employees.Remove(employee);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }

        private bool EmployeeExists(int id)
        {
            return _context.Employees.Any(e => e.EmployeeId == id);
        }
    }
}

// ==== Controllers\HomeController.cs ====
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering; // ��� SelectList
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic; // ��� List<T>
using TravelAgencyDomain.Model;    // ���� ����� (Client, Tour, Country, Booking, Employee)
using TravelAgencyInfrastructure.Models; // ��� ErrorViewModel
// �������������, �� ��� DbContext ����������� � ����� namespace, ��� ������ using
// ���� DbContext � TravelAgencyInfrastructure (�� � ������ ProjectEssentials.txt), �� ��� using �� �������
// using TravelAgencyInfrastructure; 

namespace TravelAgencyInfrastructure.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly TravelAgencyDbContext _context; // ��� DbContext

        public HomeController(ILogger<HomeController> logger, TravelAgencyDbContext context)
        {
            _logger = logger;
            _context = context;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        // ������� � ������� ������� ������
        public IActionResult SimpleQueriesList()
        {
            ViewData["Title"] = "������ ������� ������";
            return View();
        }

        // ������� � ������� �������� ������
        public IActionResult ComplexQueriesList()
        {
            ViewData["Title"] = "������ �������� ������";
            return View();
        }

        // �������� ����� �1: �볺���, �� ����������� �Ѳ ���� �� ������� �����
        // GET: Home/ClientsBookedAllToursInCountry
        public async Task<IActionResult> ClientsBookedAllToursInCountry(string? countryName)
        {
            ViewData["CurrentCountryName"] = countryName;
            var resultClients = new List<Client>();

            if (string.IsNullOrWhiteSpace(countryName))
            {
                ViewData["InfoMessage"] = "���� �����, ������ ����� ����� ��� ������.";
                return View("ClientsBookedAllToursInCountry", resultClients);
            }

            if (_context.Countries == null || _context.Tours == null || _context.Clients == null || _context.Bookings == null)
            {
                return Problem("������� ������������: ���� ��� ������� ������ ����� (DbSet) �� �������������.");
            }

            var targetCountry = await _context.Countries
                                          .FirstOrDefaultAsync(c => c.CountryName.ToLower() == countryName.ToLower());

            if (targetCountry == null)
            {
                ViewData["ErrorMessage"] = $"����� � ������ '{countryName}' �� ��������.";
                return View("ClientsBookedAllToursInCountry", resultClients);
            }

            var tourIdsInTargetCountry = await _context.Tours
                                                .Where(t => t.CountryId == targetCountry.CountryId)
                                                .Select(t => t.TourId)
                                                .Distinct()
                                                .ToListAsync();

            if (!tourIdsInTargetCountry.Any())
            {
                ViewData["InfoMessage"] = $"��� ����� '{countryName}' ���� ��������� ���� ��� ������.";
                return View("ClientsBookedAllToursInCountry", resultClients);
            }

            var potentialClients = await _context.Clients
                .Where(c => c.Bookings.Any(b => b.Tour.CountryId == targetCountry.CountryId))
                .Select(c => new
                {
                    ClientObject = c,
                    BookedTourIdsInCountry = c.Bookings
                                             .Where(b => b.Tour.CountryId == targetCountry.CountryId)
                                             .Select(b => b.TourId)
                                             .Distinct()
                                             .ToList()
                })
                .ToListAsync();

            foreach (var pc in potentialClients)
            {
                bool bookedAllTours = !tourIdsInTargetCountry.Except(pc.BookedTourIdsInCountry).Any();
                if (bookedAllTours)
                {
                    resultClients.Add(pc.ClientObject);
                }
            }

            if (!resultClients.Any() && !string.IsNullOrEmpty(countryName))
            {
                ViewData["InfoMessage"] = $"�� �������� �볺���, �� ����������� �� ���� �� ����� '{countryName}'.";
            }

            return View("ClientsBookedAllToursInCountry", resultClients);
        }

        // �������� ����� �2 (����������������): �볺���, �� ��������� ����� ����� ���� ����, �� � �������� �볺��
        // GET: Home/ClientsWithSameTourSetAsClient
        public async Task<IActionResult> ClientsWithSameTourSetAsClient(int? clientId)
        {
            ViewData["Title"] = "�볺��� � ����� �� ������� ����";

            var clientListItems = new List<SelectListItem>();
            if (_context.Clients != null)
            {
                clientListItems = await _context.Clients
                   .Select(c => new SelectListItem { Value = c.ClientId.ToString(), Text = c.FirstName + " " + c.LastName })
                   .OrderBy(c => c.Text)
                   .ToListAsync();
            }
            ViewData["ClientIdList"] = new SelectList(clientListItems, "Value", "Text", clientId);
            ViewData["SelectedClientId"] = clientId;

            var resultClients = new List<Client>();

            if (!clientId.HasValue || clientId.Value == 0)
            {
                ViewData["InfoMessage"] = "���� �����, ������ �볺��� ��� ���������.";
                return View("ClientsWithSameTourSetAsClient", resultClients);
            }

            if (_context.Clients == null || _context.Bookings == null || _context.Tours == null) // ���������� �� null ����� �������������
            {
                return Problem("���� ��� ������� ���������� DbSet �� �������������.");
            }

            var targetClient = await _context.Clients
                                        .Include(c => c.Bookings)
                                            .ThenInclude(b => b.Tour) // ������� ��� ������� �� TourId � Bookings
                                        .FirstOrDefaultAsync(c => c.ClientId == clientId.Value);

            if (targetClient == null)
            {
                ViewData["ErrorMessage"] = $"�볺��� � ID {clientId.Value} �� ��������.";
                return View("ClientsWithSameTourSetAsClient", resultClients);
            }

            var targetClientTourIds = targetClient.Bookings
                                                .Select(b => b.TourId)
                                                .Distinct()
                                                .OrderBy(id => id)
                                                .ToList();

            if (!targetClientTourIds.Any())
            {
                ViewData["InfoMessage"] = $"�볺�� {targetClient.FirstName} {targetClient.LastName} �� �� ������������� ���� ��� ���������.";
                return View("ClientsWithSameTourSetAsClient", resultClients);
            }

            ViewData["TargetClientName"] = $"{targetClient.FirstName} {targetClient.LastName}";
            ViewData["TargetClientTourIds"] = string.Join(", ", targetClientTourIds);

            var otherClientsWithBookedTourIds = await _context.Clients
                .Where(c => c.ClientId != clientId.Value && c.Bookings.Any())
                .Select(c => new
                {
                    Client = c,
                    BookedTourIds = c.Bookings.Select(b => b.TourId).Distinct().OrderBy(id => id).ToList()
                })
                .ToListAsync();

            foreach (var otherClientData in otherClientsWithBookedTourIds)
            {
                if (targetClientTourIds.SequenceEqual(otherClientData.BookedTourIds))
                {
                    resultClients.Add(otherClientData.Client);
                }
            }

            if (!resultClients.Any())
            {
                ViewData["InfoMessage"] = $"�� �������� ����� �볺���, �� � ����������� ����� ����� ����� ���� ����, �� {targetClient.FirstName} {targetClient.LastName}.";
            }

            return View("ClientsWithSameTourSetAsClient", resultClients);
        }

        // �������� ����� �3 (��� ViewModel): ����������� �� ������� ���������� ���� ��������� �� ���� ������� ����� X
        // GET: Home/EmployeeBookingStatsByTourPrice
        public async Task<IActionResult> EmployeeBookingStatsByTourPrice(decimal? minTourPrice)
        {
            decimal priceThreshold = minTourPrice ?? 15000;
            ViewData["CurrentMinTourPrice"] = priceThreshold;
            ViewData["Title"] = $"���������� ��������� ����������� (���� ������� �� {priceThreshold:C0})";

            if (_context.Employees == null || _context.Bookings == null || _context.Tours == null)
            {
                return Problem("���� ��� ������� ���������� DbSet �� �������������.");
            }

            // 1. �������� �����������. �������� �� ���������� �� ���'����� ���� ��� ������� ����������.
            var employeesWithBookingsAndTours = await _context.Employees
                .Include(e => e.Bookings)          // �������� ���������� �����������
                    .ThenInclude(b => b.Tour)      // ��� ������� ���������� �������� ���'������ ���
                .Where(e => e.Bookings.Any(b => b.Tour != null && b.Tour.PricePerPerson > priceThreshold)) // Գ������� �����������, �� ����� ���� � ���� "������" ����������
                .OrderBy(e => e.LastName)
                .ThenBy(e => e.FirstName)
                .ToListAsync();

            // 2. ����� ��� ������� ��������� ����������� �� ������ ������� "�������" ���������.
            //    ������� �� ��� ����������� .Tour ��� ������� Booking, �� �������� ���� ���������.
            var expensiveBookingCounts = new Dictionary<int, int>();
            foreach (var emp in employeesWithBookingsAndTours)
            {
                // ������������, �� Tour �� null ����� �������� �� PricePerPerson (���� ������ .Where ���� ��� ��� �� �����������)
                expensiveBookingCounts[emp.EmployeeId] = emp.Bookings
                                                    .Count(b => b.Tour != null && b.Tour.PricePerPerson > priceThreshold);
            }
            ViewData["ExpensiveBookingCounts"] = expensiveBookingCounts;


            if (!employeesWithBookingsAndTours.Any())
            {
                ViewData["InfoMessage"] = $"�� �������� �����������, �� � ����������� ���������� �� ���� ������� �� {priceThreshold:C0}.";
            }

            // �������� � View ������ �������������� �����������
            return View("EmployeeBookingStatsByTourPrice", employeesWithBookingsAndTours);
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

// ==== Controllers\HotelsController.cs ====
// Файл: TravelAgencyInfrastructure/Controllers/HotelsController.cs
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class HotelsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public HotelsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Hotels
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Hotels.Include(h => h.Country);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Hotels/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var hotel = await _context.Hotels
                .Include(h => h.Country)
                .FirstOrDefaultAsync(m => m.HotelId == id);
            if (hotel == null) return NotFound();
            return View(hotel);
        }

        // GET: Hotels/Create
        public IActionResult Create()
        {
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName");
            return View();
        }

        // POST: Hotels/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("HotelName,CountryId,City,StarRating,Address,Description")] Hotel hotel)
        {
            // Перевірка на унікальність назви готелю в межах обраної країни
            if (await _context.Hotels.AnyAsync(h => h.HotelName.ToLower() == hotel.HotelName.ToLower() && h.CountryId == hotel.CountryId))
            {
                ModelState.AddModelError("HotelName", "Готель з такою назвою вже існує в обраній країні.");
            }

            if (!await _context.Countries.AnyAsync(c => c.CountryId == hotel.CountryId))
            {
                ModelState.AddModelError("CountryId", "Обраної країни не існує.");
            }

            ModelState.Remove("HotelName");
            ModelState.Remove("Country");
            if (ModelState.IsValid)
            {
                _context.Add(hotel);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // GET: Hotels/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var hotel = await _context.Hotels.FindAsync(id);
            if (hotel == null) return NotFound();
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // POST: Hotels/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("HotelId,HotelName,CountryId,City,StarRating,Address,Description")] Hotel hotel)
        {
            if (id != hotel.HotelId) return NotFound();

            // Перевірка на унікальність назви готелю в межах обраної країни (крім поточного готелю)
            if (await _context.Hotels.AnyAsync(h => h.HotelId != hotel.HotelId && h.HotelName.ToLower() == hotel.HotelName.ToLower() && h.CountryId == hotel.CountryId))
            {
                ModelState.AddModelError("HotelName", "Інший готель з такою назвою вже існує в обраній країні.");
            }

            if (!await _context.Countries.AnyAsync(c => c.CountryId == hotel.CountryId))
            {
                ModelState.AddModelError("CountryId", "Обраної країни не існує.");
            }
            ModelState.Remove("HotelName");
            ModelState.Remove("Country");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(hotel);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!HotelExists(hotel.HotelId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", hotel.CountryId);
            return View(hotel);
        }

        // GET: Hotels/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var hotel = await _context.Hotels
                .Include(h => h.Country)
                .FirstOrDefaultAsync(m => m.HotelId == id);
            if (hotel == null) return NotFound();
            return View(hotel);
        }

        // POST: Hotels/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var hotel = await _context.Hotels.FindAsync(id);
            if (hotel != null)
            {
                // Перевірка на пов'язані тури
                bool hasTours = await _context.Tours.AnyAsync(t => t.HotelId == id);
                if (hasTours)
                {
                    ModelState.AddModelError(string.Empty, "Неможливо видалити готель, оскільки він використовується в турах. Спочатку видаліть або перепризначте ці тури.");
                    var hotelToDeleteView = await _context.Hotels.Include(h => h.Country).FirstOrDefaultAsync(m => m.HotelId == id);
                    return View("Delete", hotelToDeleteView);
                }
                _context.Hotels.Remove(hotel);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }
        // GET: Hotels/SearchByCountryNameAndRating
        public async Task<IActionResult> SearchByCountryNameAndRating(string? countryName, int? minRating)
        {
            ViewData["CurrentCountryName"] = countryName;
            ViewData["CurrentMinRating"] = minRating;

            if (_context.Hotels == null)
            {
                return Problem("Entity set 'TravelAgencyDbContext.Hotels' is null.");
            }

            var hotelsQuery = _context.Hotels
                                    .Include(h => h.Country) // Для фільтрації по назві країни та для відображення
                                    .AsQueryable();

            bool hasParameters = false; // Прапорець, чи були застосовані фільтри

            if (!string.IsNullOrEmpty(countryName))
            {
                hotelsQuery = hotelsQuery.Where(h => h.Country != null && h.Country.CountryName.Contains(countryName));
                hasParameters = true;
            }

            if (minRating.HasValue && minRating.Value >= 1 && minRating.Value <= 5)
            {
                hotelsQuery = hotelsQuery.Where(h => h.StarRating >= minRating.Value);
                hasParameters = true;
            }

            List<Hotel> hotelsResult;
            if (hasParameters) // Виконуємо запит тільки якщо були параметри
            {
                hotelsResult = await hotelsQuery.OrderBy(h => h.Country.CountryName).ThenBy(h => h.HotelName).ToListAsync();
            }
            else
            {
                
                hotelsResult = new List<Hotel>();
                // Перевіряємо, чи користувач намагався шукати (тобто параметри були, але недійсні або не дали результату)
                if (!(string.IsNullOrEmpty(countryName) && !minRating.HasValue && !ControllerContext.HttpContext.Request.Query.Any()))
                {
                    
                }
                else
                {
                    ViewData["NoParametersMessage"] = "Будь ласка, вкажіть країну та/або мінімальний рейтинг для пошуку.";
                }
            }
            return View(hotelsResult); 
        }
        private bool HotelExists(int id)
        {
            return _context.Hotels.Any(e => e.HotelId == id);
        }
    }
}

// ==== Controllers\ReviewsController.cs ====
// Файл: TravelAgencyInfrastructure/Controllers/ReviewsController.cs
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class ReviewsController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ReviewsController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Reviews
        public async Task<IActionResult> Index()
        {
            var travelAgencyDbContext = _context.Reviews
                .Include(r => r.Client)
                .Include(r => r.Tour);
            return View(await travelAgencyDbContext.ToListAsync());
        }

        // GET: Reviews/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var review = await _context.Reviews
                .Include(r => r.Client)
                .Include(r => r.Tour)
                .FirstOrDefaultAsync(m => m.ReviewId == id);
            if (review == null) return NotFound();
            return View(review);
        }

        // GET: Reviews/Create
        public IActionResult Create()
        {
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName");
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName");
            var review = new Review
            {
                ReviewDate = DateTime.Now // Встановлюємо поточну дату для нового відгуку
            };
            return View(review);
        }

        // POST: Reviews/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("TourId,ClientId,Rating,CommentText,ReviewDate")] Review review)
        {
            // Перевірка на унікальність: один клієнт - один відгук на один тур
            bool reviewExists = await _context.Reviews
                .AnyAsync(r => r.ClientId == review.ClientId && r.TourId == review.TourId);
            if (reviewExists)
            {
                ModelState.AddModelError(string.Empty, "Цей клієнт вже залишив відгук на цей тур.");
            }

            // Перевірка існування обраних сутностей
            if (!await _context.Clients.AnyAsync(c => c.ClientId == review.ClientId))
                ModelState.AddModelError("ClientId", "Обраного клієнта не існує.");
            if (!await _context.Tours.AnyAsync(t => t.TourId == review.TourId))
                ModelState.AddModelError("TourId", "Обраного туру не існує.");

            ModelState.Remove("Tour");
            ModelState.Remove("Client");
            if (ModelState.IsValid)
            {
                if (review.ReviewDate == default(DateTime)) // Якщо дата не прийшла з форми, встановимо поточну
                {
                    review.ReviewDate = DateTime.Now;
                }
                _context.Add(review);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // GET: Reviews/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var review = await _context.Reviews.FindAsync(id);
            if (review == null) return NotFound();
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // POST: Reviews/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ReviewId,TourId,ClientId,Rating,CommentText,ReviewDate")] Review review)
        {
            if (id != review.ReviewId) return NotFound();

            // Перевірка на унікальність при редагуванні (якщо змінився клієнт або тур)
            // Ігноруємо поточний відгук при перевірці
            bool reviewExists = await _context.Reviews
                .AnyAsync(r => r.ReviewId != review.ReviewId && r.ClientId == review.ClientId && r.TourId == review.TourId);
            if (reviewExists)
            {
                ModelState.AddModelError(string.Empty, "Цей клієнт вже залишив відгук на цей тур.");
            }

            if (!await _context.Clients.AnyAsync(c => c.ClientId == review.ClientId))
                ModelState.AddModelError("ClientId", "Обраного клієнта не існує.");
            if (!await _context.Tours.AnyAsync(t => t.TourId == review.TourId))
                ModelState.AddModelError("TourId", "Обраного туру не існує.");
            ModelState.Remove("Tour");
            ModelState.Remove("Client");
            if (ModelState.IsValid)
            {
                try
                {
                    // Можливо, варто оновити ReviewDate при редагуванні
                    // review.ReviewDate = DateTime.Now;
                    _context.Update(review);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ReviewExists(review.ReviewId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["ClientId"] = new SelectList(_context.Clients.Select(c => new { c.ClientId, FullName = c.FirstName + " " + c.LastName }), "ClientId", "FullName", review.ClientId);
            ViewData["TourId"] = new SelectList(_context.Tours, "TourId", "TourName", review.TourId);
            return View(review);
        }

        // GET: Reviews/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var review = await _context.Reviews
                .Include(r => r.Client)
                .Include(r => r.Tour)
                .FirstOrDefaultAsync(m => m.ReviewId == id);
            if (review == null) return NotFound();
            return View(review);
        }

        // POST: Reviews/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var review = await _context.Reviews.FindAsync(id);
            if (review != null)
            {
                _context.Reviews.Remove(review);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }
        public async Task<IActionResult> ForRecentTours(DateTime? afterDate)
        {
            ViewData["CurrentAfterDate"] = afterDate?.ToString("yyyy-MM-dd"); // Для input type="date"

            if (_context.Reviews == null)
            {
                return Problem("Entity set 'TravelAgencyDbContext.Reviews' is null.");
            }

            var reviewsQuery = _context.Reviews
                                     .Include(r => r.Tour)
                                        .ThenInclude(t => t.Country) 
                                     .Include(r => r.Client)
                                     .AsQueryable();

            if (afterDate.HasValue)
            {
                
                DateTime dateOnlyAfter = afterDate.Value.Date;
                reviewsQuery = reviewsQuery.Where(r => r.Tour.StartDate.Date >= dateOnlyAfter);
            }

            var reviews = await reviewsQuery.OrderByDescending(r => r.Tour.StartDate).ThenByDescending(r => r.ReviewDate).ToListAsync();

            if (!reviews.Any() && afterDate.HasValue)
            {
                ViewData["NoResultsMessage"] = "Відгуків на тури, що починаються після вказаної дати, не знайдено.";
            }
            else if (!afterDate.HasValue && !reviews.Any())
            {
                ViewData["NoResultsMessage"] = "Відгуків ще немає.";
            }
            else if (!afterDate.HasValue && reviews.Any())
            {
                ViewData["InfoMessage"] = "Показано всі відгуки. Вкажіть дату, щоб відфільтрувати тури, що почалися після неї.";
            }

            return View(reviews); 
        }

        private bool ReviewExists(int id)
        {
            return _context.Reviews.Any(e => e.ReviewId == id);
        }
    }
}

// ==== Controllers\ToursController.cs ====
// Файл: TravelAgencyInfrastructure/Controllers/ToursController.cs
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TravelAgencyDomain.Model;
using TravelAgencyInfrastructure;

namespace TravelAgencyInfrastructure.Controllers
{
    public class ToursController : Controller
    {
        private readonly TravelAgencyDbContext _context;

        public ToursController(TravelAgencyDbContext context)
        {
            _context = context;
        }

        // GET: Tours
        public async Task<IActionResult> Index()
        {
            var tours = _context.Tours
                .Include(t => t.Country)
                .Include(t => t.Hotel);
            return View(await tours.ToListAsync());
        }

        // GET: Tours/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null) return NotFound();
            var tour = await _context.Tours
                .Include(t => t.Country)
                .Include(t => t.Hotel)
                .FirstOrDefaultAsync(m => m.TourId == id);
            if (tour == null) return NotFound();
            return View(tour);
        }

        // GET: Tours/Create
        public IActionResult Create()
        {
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName");
            ViewData["HotelId"] = new SelectList(_context.Hotels, "HotelId", "HotelName");
            return View();
        }

        // POST: Tours/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("TourName,CountryId,HotelId,StartDate,DurationDays,PricePerPerson,TransportType,Description,MaxParticipants")] Tour tour)
        {
            // Валідація StartDate: не може бути в минулому
            if (tour.StartDate < DateTime.Today) // Порівнюємо тільки дату, без часу
            {
                ModelState.AddModelError("StartDate", "Дата початку туру не може бути в минулому.");
            }

            // Додаткова перевірка, чи обраний готель належить обраній країні (опціонально, але логічно)
            var hotel = await _context.Hotels.FindAsync(tour.HotelId);
            if (hotel != null && hotel.CountryId != tour.CountryId)
            {
                ModelState.AddModelError("HotelId", "Обраний готель не знаходиться в обраній країні.");
            }


            ModelState.Remove("Country");
            ModelState.Remove("Hotel");
            if (ModelState.IsValid)
            {
                _context.Add(tour);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            // Фільтруємо готелі за обраною країною, якщо країна обрана
            ViewData["HotelId"] = new SelectList(_context.Hotels.Where(h => h.CountryId == tour.CountryId), "HotelId", "HotelName", tour.HotelId);
            return View(tour);
        }

        // GET: Tours/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var tour = await _context.Tours.FindAsync(id);
            if (tour == null) return NotFound();
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            ViewData["HotelId"] = new SelectList(_context.Hotels.Where(h => h.CountryId == tour.CountryId), "HotelId", "HotelName", tour.HotelId); // Фільтр готелів
            return View(tour);
        }

        // POST: Tours/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("TourId,TourName,CountryId,HotelId,StartDate,DurationDays,PricePerPerson,TransportType,Description,MaxParticipants")] Tour tour)
        {
            if (id != tour.TourId) return NotFound();

            if (tour.StartDate < DateTime.Today)
            {
                ModelState.AddModelError("StartDate", "Дата початку туру не може бути в минулому.");
            }
            var hotel = await _context.Hotels.FindAsync(tour.HotelId);
            if (hotel != null && hotel.CountryId != tour.CountryId)
            {
                ModelState.AddModelError("HotelId", "Обраний готель не знаходиться в обраній країні.");
            }
            ModelState.Remove("Country");
            ModelState.Remove("Hotel");
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(tour);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!TourExists(tour.TourId)) return NotFound();
                    else throw;
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["CountryId"] = new SelectList(_context.Countries, "CountryId", "CountryName", tour.CountryId);
            ViewData["HotelId"] = new SelectList(_context.Hotels.Where(h => h.CountryId == tour.CountryId), "HotelId", "HotelName", tour.HotelId);
            return View(tour);
        }

        // GET: Tours/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var tour = await _context.Tours
                .Include(t => t.Country)
                .Include(t => t.Hotel)
                .FirstOrDefaultAsync(m => m.TourId == id);
            if (tour == null) return NotFound();
            return View(tour);
        }

        // POST: Tours/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var tour = await _context.Tours.FindAsync(id);
            if (tour != null)
            {
                bool hasBookings = await _context.Bookings.AnyAsync(b => b.TourId == id);
                bool hasReviews = await _context.Reviews.AnyAsync(r => r.TourId == id);
                if (hasBookings || hasReviews)
                {
                    ModelState.AddModelError(string.Empty, "Неможливо видалити тур. Існують пов'язані бронювання або відгуки.");
                    // Повторно завантажуємо дані для View
                    var tourToDeleteView = await _context.Tours
                        .Include(t => t.Country)
                        .Include(t => t.Hotel)
                        .FirstOrDefaultAsync(m => m.TourId == id);
                    return View("Delete", tourToDeleteView);
                }
                _context.Tours.Remove(tour);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Index));
        }
        // GET: Tours/SearchByCountryAndPrice
        // Або просто /Tours/Search, якщо хочете
        public async Task<IActionResult> SearchByCountryAndPrice(string? countryName, decimal? maxPrice)
        {
            ViewData["CurrentCountryName"] = countryName;
            ViewData["CurrentMaxPrice"] = maxPrice;

            var toursQuery = _context.Tours
                                     .Include(t => t.Country)
                                     .Include(t => t.Hotel)
                                     .AsQueryable(); // Починаємо будувати запит

            if (!string.IsNullOrEmpty(countryName))
            {
                toursQuery = toursQuery.Where(t => t.Country.CountryName.Contains(countryName));
            }

            if (maxPrice.HasValue)
            {
                toursQuery = toursQuery.Where(t => t.PricePerPerson <= maxPrice.Value);
            }

            var tours = await toursQuery.ToListAsync();

            // Якщо це перший запит (без параметрів), можна повертати порожній список або всі тури
            // Зараз, якщо параметри не задані, поверне всі тури (або відфільтровані, якщо один параметр заданий)
            return View(tours);
        }
        private bool TourExists(int id)
        {
            return _context.Tours.Any(e => e.TourId == id);
        }
    }
}

// ==== Models\ErrorViewModel.cs ====
namespace TravelAgencyInfrastructure.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}


// ==== Views\_ViewImports.cshtml ====
@using TravelAgencyInfrastructure
@using TravelAgencyInfrastructure.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


// ==== Views\_ViewStart.cshtml ====
@{
    Layout = "_Layout";
}


// ==== Views\Bookings\Create.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Створити бронювання";
}

<h1>Створити</h1>
<h4>Бронювання</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId">
                    <option value="">-- Оберіть клієнта --</option>
                </select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId">
                    <option value="">-- Оберіть тур --</option>
                </select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="EmployeeId" class="control-label"></label>
                <select asp-for="EmployeeId" class="form-control" asp-items="ViewBag.EmployeeId">
                    <option value="">-- Оберіть співробітника --</option>
                </select>
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="BookingDate" class="control-label"></label>
                <input asp-for="BookingDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="BookingDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="NumberOfPeople" class="control-label"></label>
                <input asp-for="NumberOfPeople" class="form-control" placeholder="Наприклад, 2" />
                <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TotalPrice" class="control-label"></label>
                <input asp-for="TotalPrice" class="form-control" placeholder="Буде розраховано або введіть" />
                <span asp-validation-for="TotalPrice" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" class="form-control" asp-items="ViewBag.StatusList">
                    <option value="">-- Оберіть статус --</option>
                </select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Bookings\Delete.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Бронювання</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BookingDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BookingDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.NumberOfPeople)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.NumberOfPeople)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalPrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalPrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Employee)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Employee.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="BookingId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Bookings\Details.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Бронювання</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BookingDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BookingDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.NumberOfPeople)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.NumberOfPeople)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TotalPrice)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TotalPrice)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Employee)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Employee.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.BookingId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Bookings\Edit.cshtml ====
@model TravelAgencyDomain.Model.Booking

@{
    ViewData["Title"] = "Редагувати бронювання";
}

<h1>Редагувати</h1>
<h4>Бронювання</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="BookingId" />
            <div class="form-group mb-3">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId"></select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId"></select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="EmployeeId" class="control-label"></label>
                <select asp-for="EmployeeId" class="form-control" asp-items="ViewBag.EmployeeId"></select>
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="BookingDate" class="control-label"></label>
                <input asp-for="BookingDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="BookingDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="NumberOfPeople" class="control-label"></label>
                <input asp-for="NumberOfPeople" class="form-control" placeholder="Наприклад, 2" />
                <span asp-validation-for="NumberOfPeople" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TotalPrice" class="control-label"></label>
                <input asp-for="TotalPrice" class="form-control" placeholder="Буде розраховано або введіть" />
                <span asp-validation-for="TotalPrice" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" class="form-control" asp-items="ViewBag.StatusList"></select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Bookings\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Booking>

@{
    ViewData["Title"] = "Бронювання";
}

<h1>Бронювання</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Створити нове бронювання</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tour)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Employee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BookingDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NumberOfPeople)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.FirstName) @Html.DisplayFor(modelItem => item.Client.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Tour.TourName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Employee.FirstName) @Html.DisplayFor(modelItem => item.Employee.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BookingDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NumberOfPeople)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalPrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Bookings\SearchByEmployeeAndDate.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Booking>

@{
    ViewData["Title"] = "Пошук Бронювань за Співробітником та Датою";
    var employeeIdList = ViewData["EmployeeIdList"] as SelectList;
    string currentStartDate = ViewData["CurrentStartDate"] as string ?? "";
    string currentEndDate = ViewData["CurrentEndDate"] as string ?? "";
    string? noParamsMessage = ViewData["NoParametersMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="SearchByEmployeeAndDate" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-3 form-group">
            <label for="employeeId" class="control-label">Співробітник:</label>
            <select name="employeeId" asp-items="employeeIdList" class="form-control">
                <option value="">-- Всі співробітники --</option>
            </select>
        </div>
        <div class="col-md-3 form-group">
            <label for="startDate" class="control-label">З дати:</label>
            <input type="datetime-local" name="startDate" value="@currentStartDate" class="form-control" step="60" />
        </div>
        <div class="col-md-3 form-group">
            <label for="endDate" class="control-label">По дату:</label>
            <input type="datetime-local" name="endDate" value="@currentEndDate" class="form-control" step="60" />
        </div>
        <div class="col-md-1 form-group">
            <input type="submit" value="Пошук" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="SearchByEmployeeAndDate" class="btn btn-secondary">Скинути фільтри</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(noParamsMessage))
{
    <div class="alert alert-info">@noParamsMessage</div>
}
else if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Клієнт</th>
                <th>Тур</th>
                <th>Співробітник</th>
                <th>@Html.DisplayNameFor(model => model.BookingDate)</th>
                <th>@Html.DisplayNameFor(model => model.NumberOfPeople)</th>
                <th>@Html.DisplayNameFor(model => model.TotalPrice)</th>
                <th>@Html.DisplayNameFor(model => model.Status)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Client?.FirstName @item.Client?.LastName</td>
                    <td>@item.Tour?.TourName</td>
                    <td>@item.Employee?.FirstName @item.Employee?.LastName</td>
                    <td>@item.BookingDate.ToString("g")</td>
                    <td>@Html.DisplayFor(modelItem => item.NumberOfPeople)</td>
                    <td>@Html.DisplayFor(modelItem => item.TotalPrice)</td>
                    <td>@Html.DisplayFor(modelItem => item.Status)</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-info">Деталі</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>За вашим запитом бронювань не знайдено.</p>
}

// ==== Views\Clients\Create.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Створення клієнта";
}

<h1>Створити</h1>
<h4>Клієнт</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group mb-3">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" placeholder="Наприклад, Іван" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" placeholder="Наприклад, Петренко" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="0991234567 (10 цифр)" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" placeholder="example@mail.com" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" type="date" placeholder="РРРР-ММ-ДД" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Clients\Delete.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видаити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Клажнт</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateOfBirth)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="ClientId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутися назад</a>
    </form>
</div>


// ==== Views\Clients\Details.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Клієнт</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DateOfBirth)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.ClientId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Clients\Edit.cshtml ====
@model TravelAgencyDomain.Model.Client

@{
    ViewData["Title"] = "Редагувати клієнта";
}

<h1>Редагувати</h1>
<h4>Клієнт</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ClientId" />
            <div class="form-group mb-3">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" placeholder="Наприклад, Іван" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" placeholder="Наприклад, Петренко" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="0991234567 (10 цифр)" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" placeholder="example@mail.com" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" type="date" placeholder="РРРР-ММ-ДД" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Clients\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Client>

@{
    ViewData["Title"] = "Клієнти";
}

<h1>Клієнти</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Створити нового клієнта</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateOfBirth)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfBirth)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Clients\SearchActiveClients.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Client>

@{
    ViewData["Title"] = "Пошук Активних Клієнтів (з бронюваннями)";
    string currentSearchTerm = ViewData["CurrentSearchTerm"] as string ?? "";
    string? noResultsMessage = ViewData["NoResultsMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="SearchActiveClients" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-5 form-group">
            <label for="searchTerm" class="control-label">Ім'я або прізвище (частково):</label>
            <input type="text" name="searchTerm" value="@currentSearchTerm" class="form-control" placeholder="Введіть для пошуку..." />
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Пошук" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="SearchActiveClients" class="btn btn-secondary">Скинути</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(noResultsMessage))
{
    <div class="alert alert-warning">@noResultsMessage</div>
}
else if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Email)
                </th>
                <th>
                    Кількість бронювань
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @item.Bookings.Count()
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-info">Деталі</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (string.IsNullOrEmpty(currentSearchTerm)) // Якщо не шукали і список порожній
{
    <p>Немає активних клієнтів (з бронюваннями). Введіть параметри для пошуку.</p>
}
else // Якщо шукали, але нічого не знайшли (це повідомлення вже є у ViewData, але для страховки)
{
    <p>Активних клієнтів (з бронюваннями) за вашим запитом не знайдено.</p>
}

// ==== Views\Countries\Create.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Створити країну";
}

<h1>Створити</h1>
<h4>Країна</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="CountryName" class="control-label"></label>
                <input asp-for="CountryName" class="form-control" placeholder="Наприклад, Україна" />
                <span asp-validation-for="CountryName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3 form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="VisaRequired" /> @Html.DisplayNameFor(model => model.VisaRequired)
                </label>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Continent" class="control-label"></label>
                <input asp-for="Continent" class="form-control" placeholder="Наприклад, Європа" />
                <span asp-validation-for="Continent" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Countries\Delete.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Країни</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CountryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.VisaRequired)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.VisaRequired)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Continent)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Continent)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="CountryId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Countries\Details.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Країни</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CountryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.VisaRequired)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.VisaRequired)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Continent)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Continent)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.CountryId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Countries\Edit.cshtml ====
@model TravelAgencyDomain.Model.Country

@{
    ViewData["Title"] = "Редагувати країну";
}

<h1>Редагувати</h1>
<h4>Країна</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CountryId" />
            <div class="form-group mb-3">
                <label asp-for="CountryName" class="control-label"></label>
                <input asp-for="CountryName" class="form-control" placeholder="Наприклад, Україна" />
                <span asp-validation-for="CountryName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3 form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="VisaRequired" /> @Html.DisplayNameFor(model => model.VisaRequired)
                </label>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Continent" class="control-label"></label>
                <input asp-for="Continent" class="form-control" placeholder="Наприклад, Європа" />
                <span asp-validation-for="Continent" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Countries\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Country>

@{
    ViewData["Title"] = "Країни";
}

<h1>Країни</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Створити нову країну</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CountryName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VisaRequired)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Continent)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CountryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VisaRequired)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Continent)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.CountryId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.CountryId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.CountryId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Employees\Create.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Додати співробітника";
}

<h1>Додати</h1>
<h4>Співробітник</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" placeholder="Наприклад, Марія" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" placeholder="Наприклад, Петренко" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Position" class="control-label"></label>
                <input asp-for="Position" class="form-control" placeholder="Наприклад, Менеджер" />
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="HireDate" class="control-label"></label>
                <input asp-for="HireDate" class="form-control" type="date" />
                <span asp-validation-for="HireDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="0991234567" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" placeholder="example@travel.ua" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Employees\Delete.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Працівники</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HireDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="EmployeeId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Employees\Details.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Працівники</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HireDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HireDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PhoneNumber)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Email)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.EmployeeId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Employees\Edit.cshtml ====
@model TravelAgencyDomain.Model.Employee

@{
    ViewData["Title"] = "Редагувати співробітника";
}

<h1>Редагувати</h1>
<h4>Співробітник</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EmployeeId" />
            <div class="form-group mb-3">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" placeholder="Наприклад, Марія" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" placeholder="Наприклад, Петренко" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Position" class="control-label"></label>
                <input asp-for="Position" class="form-control" placeholder="Наприклад, Менеджер" />
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="HireDate" class="control-label"></label>
                <input asp-for="HireDate" class="form-control" type="date" />
                <span asp-validation-for="HireDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PhoneNumber" class="control-label"></label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="0991234567" />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" placeholder="example@travel.ua" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Employees\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Employee>

@{
    ViewData["Title"] = "Співробітники";
}

<h1>Співробітники</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Додати нового співробітника</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Position)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HireDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Position)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.HireDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Home\ClientsBookedAllToursInCountry.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Client>

@{
    ViewData["Title"] = "Клієнти, що забронювали всі тури до країни";
    string? currentCountryName = ViewData["CurrentCountryName"] as string;
    string? infoMessage = ViewData["InfoMessage"] as string;
    string? errorMessage = ViewData["ErrorMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="ClientsBookedAllToursInCountry" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-4 form-group">
            <label for="countryName" class="control-label">Назва країни:</label>
            <input type="text" name="countryName" value="@currentCountryName" class="form-control" placeholder="Наприклад, Єгипет" />
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Знайти" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="ClientsBookedAllToursInCountry" class="btn btn-secondary">Скинути</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info">@infoMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (Model != null && Model.Any())
{
    <h4>Клієнти, що забронювали всі тури до країни "@currentCountryName":</h4>
    <table class="table table-striped table-hover mt-3">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Email)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        <a asp-controller="Clients" asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-info">Деталі Клієнта</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (!string.IsNullOrEmpty(currentCountryName) && string.IsNullOrEmpty(infoMessage) && string.IsNullOrEmpty(errorMessage))
{
    <p>Не знайдено клієнтів, які б відповідали критеріям для країни "@currentCountryName".</p>
}

// ==== Views\Home\ClientsWithSameTourSetAsClient.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Client>

@{
    ViewData["Title"] = ViewData["Title"] ?? "Клієнти з таким же набором турів";
    string? infoMessage = ViewData["InfoMessage"] as string;
    string? errorMessage = ViewData["ErrorMessage"] as string;
    string? targetClientName = ViewData["TargetClientName"] as string;
    string? targetClientTourIds = ViewData["TargetClientTourIds"] as string;
    var clientIdList = ViewData["ClientIdList"] as SelectList;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="ClientsWithSameTourSetAsClient" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-5 form-group">
            <label for="clientId" class="control-label">Оберіть клієнта для порівняння:</label>
            <select name="clientId" asp-items="clientIdList" class="form-control">
                <option value="">-- Оберіть клієнта --</option>
            </select>
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Знайти" class="btn btn-primary" />
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info">@infoMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(targetClientName) && !string.IsNullOrEmpty(targetClientTourIds))
{
    <div class="alert alert-secondary mt-3">
        Порівняння з клієнтом: <strong>@targetClientName</strong>. <br />
        Його/її заброньовані тури (ID): <strong>@targetClientTourIds</strong>
    </div>
}


@if (Model != null && Model.Any())
{
    <h4>Інші клієнти, що забронювали такий самий набір турів:</h4>
    <table class="table table-striped table-hover mt-3">
        <thead class="thead-light">
            <tr>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().FirstName)</th>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().LastName)</th>
                <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Email)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                    <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                    <td>
                        <a asp-controller="Clients" asp-action="Details" asp-route-id="@item.ClientId" class="btn btn-sm btn-outline-info">Деталі Клієнта</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (ViewData["SelectedClientId"] != null && string.IsNullOrEmpty(infoMessage) && string.IsNullOrEmpty(errorMessage))
{
    <p>Не знайдено інших клієнтів, що відповідають критеріям.</p>
}


<div class="mt-4">
    <a asp-controller="Home" asp-action="ComplexQueriesList" class="btn btn-outline-secondary">До списку складних запитів</a>
</div>

// ==== Views\Home\ComplexQueriesList.cshtml ====
@{
    ViewData["Title"] = "Складні Запити (з множинними порівняннями)";
}

<h1>@ViewData["Title"]</h1>

<p>Оберіть запит зі списку нижче:</p>

<div class="list-group mt-4">
    <a asp-controller="Home" asp-action="ClientsBookedAllToursInCountry" class="list-group-item list-group-item-action">
        <strong>Запит 1:</strong> Клієнти, що забронювали ВСІ тури до вказаної країни
    </a>
    </a>
    <a asp-controller="Home" asp-action="ClientsWithSameTourSetAsClient" class="list-group-item list-group-item-action">
        <strong>Запит 2:</strong> Клієнти, що бронювали ТАКИЙ САМИЙ набір турів, як і вказаний клієнт
    </a>
    <a asp-controller="Home" asp-action="EmployeeBookingStatsByTourPrice" class="list-group-item list-group-item-action">
        <strong>Запит 3:</strong> Співробітники та к-сть їх бронювань "дорогих" турів
    </a>
</div>

<div class="mt-4">
    <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Повернутися на Головну</a>
</div>

// ==== Views\Home\EmployeeBookingStatsByTourPrice.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Employee>
@{
    ViewData["Title"] = ViewData["Title"] ?? "Статистика бронювань співробітників";
    decimal currentMinTourPrice = (decimal)(ViewData["CurrentMinTourPrice"] ?? 15000m);
    string? infoMessage = ViewData["InfoMessage"] as string;
    var expensiveBookingCounts = ViewData["ExpensiveBookingCounts"] as Dictionary<int, int> ?? new Dictionary<int, int>();
}

<h1>@ViewData["Title"]</h1>

<form asp-action="EmployeeBookingStatsByTourPrice" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-5 form-group">
            <label for="minTourPrice" class="control-label">Показати бронювання на тури дорожчі за (грн):</label>
            <input type="number" name="minTourPrice" value="@currentMinTourPrice" class="form-control" step="1000" min="0" placeholder="Наприклад, 15000" />
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Показати" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="EmployeeBookingStatsByTourPrice" class="btn btn-secondary">Скинути</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info">@infoMessage</div>
}

@if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover mt-3">
        <thead class="thead-light">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Position)
                </th>
                <th>
                    К-сть бронювань турів > @string.Format("{0:C0}", currentMinTourPrice)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Position)
                    </td>
                    <td>
                        @(expensiveBookingCounts.ContainsKey(item.EmployeeId) ? expensiveBookingCounts[item.EmployeeId] : 0)
                    </td>
                    <td>
                        <a asp-controller="Employees" asp-action="Details" asp-route-id="@item.EmployeeId" class="btn btn-sm btn-outline-info">Деталі Співробітника</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (string.IsNullOrEmpty(infoMessage))
{
    <p>Немає даних для відображення за вказаними критеріями.</p>
}

<div class="mt-4">
    <a asp-controller="Home" asp-action="ComplexQueriesList" class="btn btn-outline-secondary">До списку складних запитів</a>
</div>

// ==== Views\Home\Index.cshtml ====
@{
    ViewData["Title"] = "Головна сторінка";
}

<div class="text-center">
    <h1 class="display-4">Ласкаво просимо!</h1>
    <p>Оберіть розділ у навігаційному меню для роботи з даними.</p>
</div>

// ==== Views\Home\Privacy.cshtml ====
@{
    ViewData["Title"] = "Політика Конфіденційності";
}
<h1>@ViewData["Title"]</h1>

<p>З політикою все норм</p>

// ==== Views\Home\SimpleQueriesList.cshtml ====
@* Файл: TravelAgencyInfrastructure/Views/Home/SimpleQueriesList.cshtml *@
@{
    ViewData["Title"] = "Прості Параметризовані Запити";
}

<h1>@ViewData["Title"]</h1>

<p>Оберіть запит зі списку нижче, щоб перейти до сторінки введення параметрів та перегляду результатів.</p>

<div class="list-group mt-4">
    <a asp-controller="Tours" asp-action="SearchByCountryAndPrice" class="list-group-item list-group-item-action">
        <strong>Запит 1:</strong> Тури за країною та максимальною ціною
    </a>
    <a asp-controller="Clients" asp-action="SearchActiveClients" class="list-group-item list-group-item-action">
        <strong>Запит 2:</strong> Пошук активних клієнтів (з бронюваннями) за ім'ям/прізвищем
    </a>
    <a asp-controller="Bookings" asp-action="SearchByEmployeeAndDate" class="list-group-item list-group-item-action">
        <strong>Запит 3:</strong> Бронювання конкретного співробітника за діапазон дат
    </a>
    <a asp-controller="Hotels" asp-action="SearchByCountryNameAndRating" class="list-group-item list-group-item-action">
        <strong>Запит 4:</strong> Готелі за назвою країни та мінімальним рейтингом
    </a>
    <a asp-controller="Reviews" asp-action="ForRecentTours" class="list-group-item list-group-item-action">
        <strong>Запит 5:</strong> Відгуки на тури, що починаються після певної дати
    </a>
</div>

<div class="mt-4">
    <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary">Повернутися на Головну</a>
</div>

// ==== Views\Hotels\Create.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Додати готель";
}

<h1>Додати</h1>
<h4>Готель</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="HotelName" class="control-label"></label>
                <input asp-for="HotelName" class="form-control" placeholder="Наприклад, Rixos" />
                <span asp-validation-for="HotelName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId">
                    <option value="">-- Оберіть країну --</option>
                </select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" placeholder="Наприклад, Анталія" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="StarRating" class="control-label"></label>
                <input asp-for="StarRating" class="form-control" type="number" min="1" max="5" placeholder="1-5" />
                <span asp-validation-for="StarRating" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" placeholder="Наприклад, вул. Центральна, 1" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Короткий опис готелю..."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Hotels\Delete.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Готелі</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HotelName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HotelName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StarRating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StarRating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Address)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Address)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="HotelId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Hotels\Details.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Готелі</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.HotelName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.HotelName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StarRating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StarRating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Address)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Address)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.HotelId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Hotels\Edit.cshtml ====
@model TravelAgencyDomain.Model.Hotel

@{
    ViewData["Title"] = "Редагувати готель";
}

<h1>Редагувати</h1>
<h4>Готель</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="HotelId" />
            <div class="form-group mb-3">
                <label asp-for="HotelName" class="control-label"></label>
                <input asp-for="HotelName" class="form-control" placeholder="Наприклад, Rixos" />
                <span asp-validation-for="HotelName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId"></select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control" placeholder="Наприклад, Анталія" />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="StarRating" class="control-label"></label>
                <input asp-for="StarRating" class="form-control" type="number" min="1" max="5" placeholder="1-5" />
                <span asp-validation-for="StarRating" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" placeholder="Наприклад, вул. Центральна, 1" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Короткий опис готелю..."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Hotels\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Hotel>

@{
    ViewData["Title"] = "Готелі";
}

<h1>Готелі</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Додати новий готель</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.HotelName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StarRating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.Description)
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.HotelName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country.CountryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StarRating)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                @*<td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>*@
                <td>
                    <a asp-action="Edit" asp-route-id="@item.HotelId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.HotelId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.HotelId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Hotels\SearchByCountryNameAndRating.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Hotel>

@{
    ViewData["Title"] = "Пошук Готелів за Країною та Рейтингом";
    string currentCountryName = ViewData["CurrentCountryName"] as string ?? "";
    int? currentMinRating = ViewData["CurrentMinRating"] as int?;
    string? noParamsMessage = ViewData["NoParametersMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="SearchByCountryNameAndRating" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-4 form-group">
            <label for="countryName" class="control-label">Назва країни (частково):</label>
            <input type="text" name="countryName" value="@currentCountryName" class="form-control" placeholder="Наприклад, Іспанія" />
        </div>
        <div class="col-md-3 form-group">
            <label for="minRating" class="control-label">Мінімальний рейтинг (1-5):</label>
            <input type="number" name="minRating" value="@currentMinRating" class="form-control" min="1" max="5" placeholder="1-5" />
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Пошук" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="SearchByCountryNameAndRating" class="btn btn-secondary">Скинути</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(noParamsMessage))
{
    <div class="alert alert-info">@noParamsMessage</div>
}
else if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().HotelName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Country.CountryName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().City)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().StarRating)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.HotelName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Country.CountryName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.City)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StarRating)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.HotelId" class="btn btn-sm btn-outline-info">Деталі</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>За вашим запитом готелів не знайдено.</p>
}

// ==== Views\Reviews\Create.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Залишити відгук";
}

<h1>Залишити відгук</h1>
<h4>Відгук</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId">
                    <option value="">-- Оберіть тур --</option>
                </select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId">
                    <option value="">-- Оберіть клієнта --</option>
                </select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Rating" class="control-label"></label>
                <input asp-for="Rating" class="form-control" type="number" min="1" max="5" placeholder="1-5" />
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CommentText" class="control-label"></label>
                <textarea asp-for="CommentText" class="form-control" rows="3" placeholder="Ваш коментар..."></textarea>
                <span asp-validation-for="CommentText" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="ReviewDate" class="control-label"></label>
                <input asp-for="ReviewDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="ReviewDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Reviews\Delete.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Відгуки</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Rating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Rating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CommentText)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CommentText)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ReviewDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ReviewDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="ReviewId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Reviews\Details.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Деталі";
}

<h1>Деталі</h1>

<div>
    <h4>Відгуки</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Rating)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Rating)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CommentText)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CommentText)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ReviewDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ReviewDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Client)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Client.FirstName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Tour)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Tour.TourName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.ReviewId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Reviews\Edit.cshtml ====
@model TravelAgencyDomain.Model.Review

@{
    ViewData["Title"] = "Редагувати відгук";
}

<h1>Редагувати</h1>
<h4>Відгук</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ReviewId" />
            <div class="form-group mb-3">
                <label asp-for="TourId" class="control-label"></label>
                <select asp-for="TourId" class="form-control" asp-items="ViewBag.TourId"></select>
                <span asp-validation-for="TourId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="ClientId" class="control-label"></label>
                <select asp-for="ClientId" class="form-control" asp-items="ViewBag.ClientId"></select>
                <span asp-validation-for="ClientId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Rating" class="control-label"></label>
                <input asp-for="Rating" class="form-control" type="number" min="1" max="5" placeholder="1-5" />
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CommentText" class="control-label"></label>
                <textarea asp-for="CommentText" class="form-control" rows="3" placeholder="Ваш коментар..."></textarea>
                <span asp-validation-for="CommentText" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="ReviewDate" class="control-label"></label>
                <input asp-for="ReviewDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="ReviewDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

// ==== Views\Reviews\ForRecentTours.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Review>

@{
    ViewData["Title"] = "Відгуки на Тури Після Дати";
    string currentAfterDate = ViewData["CurrentAfterDate"] as string ?? "";
    string? noResultsMessage = ViewData["NoResultsMessage"] as string;
    string? infoMessage = ViewData["InfoMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="ForRecentTours" method="get" class="mb-3">
    <div class="row align-items-end">
        <div class="col-md-4 form-group">
            <label for="afterDate" class="control-label">Тури, що починаються після дати:</label>
            <input type="date" name="afterDate" value="@currentAfterDate" class="form-control" />
        </div>
        <div class="col-md-2 form-group">
            <input type="submit" value="Показати" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group">
            <a asp-action="ForRecentTours" class="btn btn-secondary">Всі відгуки</a>
        </div>
    </div>
</form>

@if (!string.IsNullOrEmpty(noResultsMessage))
{
    <div class="alert alert-warning">@noResultsMessage</div>
}
@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info">@infoMessage</div>
}

@if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Tour.TourName)
                </th>
                <th>
                    Країна Туру
                </th>
                <th>
                    Дата початку туру
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Client)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Rating)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().CommentText)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().ReviewDate)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Tour.TourName)
                    </td>
                    <td>
                        @item.Tour.Country?.CountryName
                    </td>
                    <td>
                        @item.Tour.StartDate.ToString("dd.MM.yyyy")
                    </td>
                    <td>
                        @item.Client?.FirstName @item.Client?.LastName
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Rating)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CommentText)
                    </td>
                    <td>
                        @item.ReviewDate.ToString("dd.MM.yyyy HH:mm")
                    </td>
                    <td>
                        <a asp-controller="Tours" asp-action="Details" asp-route-id="@item.TourId" class="btn btn-sm btn-link">Деталі Туру</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (string.IsNullOrEmpty(noResultsMessage) && string.IsNullOrEmpty(infoMessage)) // Якщо параметри були, але результатів немає
{
    <p>Відгуків за вашим запитом не знайдено.</p>
}

// ==== Views\Reviews\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Review>

@{
    ViewData["Title"] = "Відгуки";
}

<h1>Відгуки</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Залишити новий відгук</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Tour)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Rating)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CommentText)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReviewDate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Tour.TourName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.FirstName) @Html.DisplayFor(modelItem => item.Client.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CommentText)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReviewDate)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ReviewId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.ReviewId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.ReviewId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Shared\Error.cshtml ====
@model ErrorViewModel
@{
    ViewData["Title"] = "Помилка";
}

<h1 class="text-danger">Помилка.</h1>
<h2 class="text-danger">Під час обробки вашого запиту сталася помилка.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>ID Запиту:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Режим Розробки</h3>
<p>
    Переключення в середовище <strong>Розробки</strong> відобразить більш детальну інформацію про помилку, що сталася.
</p>
<p>
    <strong>Середовище розробки не повинно бути увімкнене для розгорнутих додатків.</strong>
    Це може призвести до відображення конфіденційної інформації з винятків кінцевим користувачам.
    Для локального налагодження увімкніть середовище <strong>Розробки</strong>, встановивши змінну середовища <strong>ASPNETCORE_ENVIRONMENT</strong> на <strong>Development</strong>
    та перезапустивши додаток.
</p>

// ==== Views\Shared\_Layout.cshtml ====
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Туристичне Агентство</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-custom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Турагентство</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">Головна</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownCrud" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Довідники (CRUD)
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdownCrud">
                                <li><a class="dropdown-item" asp-area="" asp-controller="Clients" asp-action="Index">Клієнти</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Countries" asp-action="Index">Країни</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Hotels" asp-action="Index">Готелі</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Tours" asp-action="Index">Тури</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Bookings" asp-action="Index">Бронювання</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Employees" asp-action="Index">Співробітники</a></li>
                                <li><a class="dropdown-item" asp-area="" asp-controller="Reviews" asp-action="Index">Відгуки</a></li>
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="SimpleQueriesList">Прості Запити</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="ComplexQueriesList">Складні Запити</a>
                        </li>
                        
                        <li class="nav-item">
                            <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Privacy">Конфіденційність</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted footer-custom">
        <div class="container">
            &copy; @System.DateTime.Now.Year - Туристичне Агентство MVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Політика Конфіденційності</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

// ==== Views\Shared\_Layout.cshtml.css ====
/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}


// ==== Views\Shared\_ValidationScriptsPartial.cshtml ====
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>


// ==== Views\Tours\Create.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Створити тур";
}

<h1>Створити</h1>
<h4>Тур</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mb-3">
                <label asp-for="TourName" class="control-label"></label>
                <input asp-for="TourName" class="form-control" placeholder="Наприклад, Відпочинок на Мальдівах" />
                <span asp-validation-for="TourName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId">
                    <option value="">-- Оберіть країну --</option>
                </select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="HotelId" class="control-label"></label>
                <select asp-for="HotelId" class="form-control" asp-items="ViewBag.HotelId">
                    <option value="">-- Оберіть готель --</option>
                </select>
                <span asp-validation-for="HotelId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control" placeholder="Наприклад, 7" />
                <span asp-validation-for="DurationDays" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PricePerPerson" class="control-label"></label>
                <input asp-for="PricePerPerson" class="form-control" placeholder="Наприклад, 15000.00" />
                <span asp-validation-for="PricePerPerson" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TransportType" class="control-label"></label>
                <input asp-for="TransportType" class="form-control" placeholder="Наприклад, Авіа" />
                <span asp-validation-for="TransportType" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Детальний опис туру..."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="MaxParticipants" class="control-label"></label>
                <input asp-for="MaxParticipants" class="form-control" placeholder="Наприклад, 20" />
                <span asp-validation-for="MaxParticipants" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Створити" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        $(document).ready(function () {
            $("#CountryId").change(function () {
                var countryId = $(this).val();
                var hotelSelect = $("#HotelId");
                hotelSelect.empty();
                hotelSelect.append($('<option/>', { value: '', text: '-- Оберіть готель --' }));
                if (countryId) {
                    // Для динамічного завантаження потрібен AJAX, поки що не реалізовано
                    console.log("Country changed to: " + countryId + ". Dynamic hotel loading would go here.");
                }
            });
        });
    </script>
}

// ==== Views\Tours\Delete.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Видалити";
}

<h1>Видалити</h1>

<h3>Ви впевнені, що хочете видалити?</h3>
<div>
    <h4>Тури</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TourName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TourName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StartDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DurationDays)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DurationDays)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PricePerPerson)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PricePerPerson)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TransportType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TransportType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MaxParticipants)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MaxParticipants)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Hotel)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Hotel.HotelName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="TourId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Повернутись назад</a>
    </form>
</div>


// ==== Views\Tours\Details.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Details";
}

<h1>Деталі</h1>

<div>
    <h4>Тури</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TourName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TourName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.StartDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.StartDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DurationDays)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DurationDays)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.PricePerPerson)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.PricePerPerson)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TransportType)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.TransportType)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.MaxParticipants)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.MaxParticipants)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Country)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Country.CountryName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Hotel)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Hotel.HotelName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.TourId">Редагувати</a> |
    <a asp-action="Index">Повернутись назад</a>
</div>


// ==== Views\Tours\Edit.cshtml ====
@model TravelAgencyDomain.Model.Tour

@{
    ViewData["Title"] = "Редагувати тур";
}

<h1>Редагувати</h1>
<h4>Тур</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="TourId" />

            <div class="form-group mb-3">
                <label asp-for="TourName" class="control-label"></label>
                <input asp-for="TourName" class="form-control" placeholder="Наприклад, Відпочинок на Мальдівах" />
                <span asp-validation-for="TourName" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="CountryId" class="control-label"></label>
                <select asp-for="CountryId" class="form-control" asp-items="ViewBag.CountryId">
                    <option value="">-- Оберіть країну --</option>
                </select>
                <span asp-validation-for="CountryId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="HotelId" class="control-label"></label>
                <select asp-for="HotelId" class="form-control" asp-items="ViewBag.HotelId">
                    <option value="">-- Оберіть готель --</option>
                </select>
                <span asp-validation-for="HotelId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" class="form-control" type="datetime-local" step="60" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control" placeholder="Наприклад, 7" />
                <span asp-validation-for="DurationDays" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PricePerPerson" class="control-label"></label>
                <input asp-for="PricePerPerson" class="form-control" placeholder="Наприклад, 15000.00" />
                <span asp-validation-for="PricePerPerson" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="TransportType" class="control-label"></label>
                <input asp-for="TransportType" class="form-control" placeholder="Наприклад, Авіа" />
                <span asp-validation-for="TransportType" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3" placeholder="Детальний опис туру..."></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="MaxParticipants" class="control-label"></label>
                <input asp-for="MaxParticipants" class="form-control" placeholder="Наприклад, 20" />
                <span asp-validation-for="MaxParticipants" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Зберегти" class="btn btn-primary" /> |
                <a asp-action="Index" class="btn btn-secondary">Повернутися до списку</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        $(document).ready(function () {
            $("#CountryId").change(function () {
                var countryId = $(this).val();
                var hotelSelect = $("#HotelId");
                hotelSelect.empty();
                hotelSelect.append($('<option/>', { value: '', text: '-- Оберіть готель --' }));
                if (countryId) {
                    // Для динамічного завантаження потрібен AJAX
                    console.log("Country changed to: " + countryId + ". Dynamic hotel loading would go here.");
                }
            });
        });
    </script>
}

// ==== Views\Tours\Index.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Tour>

@{
    ViewData["Title"] = "Тури";
}

<h1>Тури</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Створити новий тур</a>
</p>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.TourName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Hotel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DurationDays)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PricePerPerson)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TransportType)
            </th>
            @* Можна приховати опис у списку, якщо він задовгий
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            *@
            <th>
                @Html.DisplayNameFor(model => model.MaxParticipants)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.TourName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country.CountryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Hotel.HotelName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DurationDays)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PricePerPerson)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TransportType)
                </td>
                @*
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            *@
                <td>
                    @Html.DisplayFor(modelItem => item.MaxParticipants)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.TourId" class="btn btn-sm btn-outline-primary">Редагувати</a> |
                    <a asp-action="Details" asp-route-id="@item.TourId" class="btn btn-sm btn-outline-info">Деталі</a> |
                    <a asp-action="Delete" asp-route-id="@item.TourId" class="btn btn-sm btn-outline-danger">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

// ==== Views\Tours\SearchByCountryAndPrice.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Tour>

@{
    ViewData["Title"] = "Пошук Турів за Країною та Ціною";
    string currentCountryName = ViewData["CurrentCountryName"] as string ?? "";
    decimal? currentMaxPrice = ViewData["CurrentMaxPrice"] as decimal?;
}

<h1>@ViewData["Title"]</h1>

<form asp-action="SearchByCountryAndPrice" method="get" class="mb-3">
    <div class="row">
        <div class="col-md-4 form-group">
            <label for="countryName" class="control-label">Назва країни (частково або повністю):</label>
            <input type="text" name="countryName" value="@currentCountryName" class="form-control" />
        </div>
        <div class="col-md-4 form-group">
            <label for="maxPrice" class="control-label">Максимальна ціна за особу:</label>
            <input type="number" name="maxPrice" value="@currentMaxPrice" class="form-control" step="100.00" min="0" />
        </div>
        <div class="col-md-2 form-group align-self-end">
            <input type="submit" value="Пошук" class="btn btn-primary" />
        </div>
        <div class="col-md-2 form-group align-self-end">
            <a asp-action="SearchByCountryAndPrice" class="btn btn-secondary">Скинути</a>
        </div>
    </div>
</form>

@if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.TourName)</th>
                <th>@Html.DisplayNameFor(model => model.Country)</th>
                <th>@Html.DisplayNameFor(model => model.Hotel)</th>
                <th>@Html.DisplayNameFor(model => model.StartDate)</th>
                <th>@Html.DisplayNameFor(model => model.DurationDays)</th>
                <th>@Html.DisplayNameFor(model => model.PricePerPerson)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.TourName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Country.CountryName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Hotel.HotelName)</td>
                    <td>@item.StartDate.ToString("dd.MM.yyyy")</td>
                    <td>@Html.DisplayFor(modelItem => item.DurationDays)</td>
                    <td>@Html.DisplayFor(modelItem => item.PricePerPerson)</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.TourId" class="btn btn-sm btn-outline-info">Деталі</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (Context.Request.Query.ContainsKey("countryName") || Context.Request.Query.ContainsKey("maxPrice"))
{
    <p>За вашим запитом турів не знайдено.</p>
}
else
{
    <p>Введіть параметри для пошуку.</p>
}

// ==== Views\Tours\WithNoReviews.cshtml ====
@model IEnumerable<TravelAgencyDomain.Model.Tour>

@{
    // ViewData["Title"] встановлюється в контролері
    string? infoMessage = ViewData["InfoMessage"] as string;
}

<h1>@ViewData["Title"]</h1>

@if (!string.IsNullOrEmpty(infoMessage))
{
    <div class="alert alert-info">@infoMessage</div>
}

@if (Model != null && Model.Any())
{
    <p>Список турів, для яких ще не залишено жодного відгуку:</p>
    <table class="table table-striped table-hover mt-3">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().TourName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Country)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().Hotel)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().StartDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FirstOrDefault().PricePerPerson)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.TourName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Country.CountryName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Hotel.HotelName)
                    </td>
                    <td>
                        @item.StartDate.ToString("dd.MM.yyyy")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PricePerPerson)
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.TourId" class="btn btn-sm btn-outline-info">Деталі Туру</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (string.IsNullOrEmpty(infoMessage)) // Якщо не було infoMessage і модель порожня
{
    <p>Не знайдено турів без відгуків.</p>
}

<div class="mt-4">
    <a asp-controller="Home" asp-action="ComplexQueriesList" class="btn btn-outline-secondary">До списку складних запитів</a>
</div>

// ==== wwwroot\css\site.css ====
/* �������� ���� */
html {
    font-size: 14px;
}

@media (min-width: 768px) {
    html {
        font-size: 16px;
    }
}

html {
    position: relative;
    min-height: 100%;
}

body {
    margin-bottom: 60px; /* ³����� ��� ������ */
    background-color: #f0fff0; /* ���� �����-��������� ��� ��� ��� */
    color: #2F4F4F; /* �����-���-������� ��� ��������� ������ */
}

h1, h2, h3, h4, h5, h6 {
    color: #2E8B57; /* ������� ������ ��� ��������� */
}

/* ���������� ������ */
.navbar-custom {
    background-color: #90EE90; /* �����-������� */
    border-bottom: 1px solid #3CB371; /* ��������-������� ������ */
}

    .navbar-custom .navbar-brand {
        color: #2F4F4F; /* ������ ��� ������ */
        font-weight: bold;
    }

        .navbar-custom .navbar-brand:hover,
        .navbar-custom .navbar-brand:focus {
            color: #2E8B57;
        }

    .navbar-custom .nav-link {
        color: #2F4F4F; /* ������ ��� �������� */
    }

        .navbar-custom .nav-link:hover,
        .navbar-custom .nav-link:focus {
            color: #006400; /* �����-������� ��� ��������� */
            background-color: rgba(255, 255, 255, 0.2);
        }

    .navbar-custom .navbar-toggler {
        border-color: rgba(47, 79, 79, 0.5); /* ������ ��� ����� ������� */
    }

    .navbar-custom .navbar-toggler-icon {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2847, 79, 79, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
    }


/* ������ */
.btn-primary {
    color: #fff;
    background-color: #3CB371; /* ��������-������� ������ */
    border-color: #2E8B57; /* ������� ������ */
}

    .btn-primary:hover {
        color: #fff;
        background-color: #2E8B57;
        border-color: #20603D;
    }

.btn-secondary {
    color: #fff;
    background-color: #8FBC8F; /* �����-������� ������ */
    border-color: #709670;
}

    .btn-secondary:hover {
        color: #fff;
        background-color: #7AAB7A;
        border-color: #618961;
    }

.btn-danger {
    color: #fff;
    background-color: #FF6347; /* �������� (��� ��������� � �������) */
    border-color: #E0523B;
}

    .btn-danger:hover {
        color: #fff;
        background-color: #D34127;
        border-color: #B83A23;
    }


/* ������� */
.table {
    background-color: #fff; /* ����� ��� ��� ������� ��� ������������ */
}

    .table thead th {
        background-color: #98FB98; /* ����-������� ��� ��������� ������� */
        color: #2F4F4F;
        border-bottom: 2px solid #3CB371;
    }

.table-striped tbody tr:nth-of-type(odd) {
    background-color: #F5FFFA; /* �'����� ���� */
}

.table-hover tbody tr:hover {
    background-color: #E0EEE0; /* ������� ������� ��� ��������� */
}


/* ����� */
.form-control:focus {
    border-color: #3CB371;
    box-shadow: 0 0 0 0.25rem rgba(60, 179, 113, 0.25);
}

/* ����� */
.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    white-space: nowrap;
    line-height: 60px; /* ������ ������ */
    background-color: #E0F2E0; /* ���� ������ ������� ��� ������ */
}

    .footer a {
        color: #2E8B57;
    }

        .footer a:hover {
            color: #006400;
        }

/* ��� �������� */
.field-validation-error {
    color: #FF6347; /* �������� */
}

.validation-summary-errors {
    color: #FF6347;
}

.input-validation-error {
    border-color: #FF6347;
}


// ==== wwwroot\js\site.js ====
// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.


